/**Class manages reading input and writing output for simulation. */import java.io.*;import java.util.StringTokenizer;import java.util.Vector;public class IO{	/**Saves simulation data to a text file.	 */	public void save(Storage[] simulatedStats, float minlam, float maxlam, 		String outputFileName){ 		try {		                //print descriptive info at top of file					            PrintStream out = new PrintStream(new FileOutputStream(outputFileName+".txt"));			out.println("time_"+outputFileName+",\tMean_"+outputFileName+",\tSignal_"+outputFileName+",\tsdev_"+outputFileName);                //print time series			for (int i = 0; i < simulatedStats.length; i++){			                      				 String outputLine=simulatedStats[i].getRun()+",\t"+simulatedStats[i].getMeanInflExp()+                            ",\t"+simulatedStats[i].getActual()+                            ",\t"+simulatedStats[i].getSdev();				out.println(outputLine);					}			out.close();		} catch (IOException e) {}															    	    }    		//reads data from file and saves it to a data structure	//for use in the simulatoin	public Vector readData(String datafile){		Vector dat=new Vector();		try {			File inputFile = new File(datafile);			FileInputStream in = new FileInputStream(inputFile);			int c;			char k;			String input=new String();																//read characters in saved file and store as one string			while ((c = in.read()) != -1){;				k=(char) c;				input=input+k;									}									in.close();											//split up string into tokens			StringTokenizer st=new StringTokenizer(input);			String temp;			String des=new String();;			float d=0;						//create data structure objects			while(st.hasMoreTokens()){									//get time description					temp=st.nextToken();						des=temp;														//get inflation value					temp=st.nextToken();					d=(new Float(temp)).floatValue();																			dat.addElement(new Inputted(des,d));																		}			} catch (IOException e) {}				return dat;	}		}/*might use later		//find number of "news" blocks in population		int total=0;		for (int i = 0; i < popsize; i++)          for (int j=0; j<popsize;j++)			   if (pop[i][j].getsNews)				total++;*/