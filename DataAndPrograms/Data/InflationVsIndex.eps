%!PS-Adobe-3.0 EPSF-3.0%%BoundingBox: 30 33 582 761%%Title: (tmp)%%Creator: (Acrobat 5.0: AdobePS 8.7.2 \(104\))%%CreationDate: (10:37 PM Monday, March 18, 2002)%%For: (Christopher D. Carroll)%%Routing: (mailto:ccarroll@jhu.edu)%%Pages: 1%%DocumentFonts: %%DocumentNeededResources: %%DocumentSuppliedResources: %%DocumentData: Clean7Bit%%PageOrder: Ascend%%Orientation: Portrait%%DocumentMedia: (Default) 612 792 0 () ()%RBINumCopies: 1%RBINupNess: 1 1%ADO_ImageableArea: 30 33 582 761%RBIDocumentSuppliedFonts: %%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaultsuserdict/dscInfo 5 dict dup begin/Title(tmp)def/Creator(Acrobat 5.0: AdobePS 8.7.2 \(104\))def/CreationDate(10:37 PM Monday, March 18, 2002)def/For(Christopher D. Carroll)def/Pages 1 defend put%%BeginProlog/md 158 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if%%BeginFile: lw8_feature-1.01%%Copyright: Copyright 1990-1999 Adobe Systems Incorporated and Apple Computer Incorporated. All Rights Reserved./bd{bind def}bind def/ld{load def}bd/xs{exch store}bd/Z{0 def}bd/T true def/F false def/level2/languagelevel where{pop languagelevel 2 ge}{F}ifelsedef/odictstk Z/oopstk Z/fcl{count oopstk sub dup 0 gt{{pop}repeat}{pop}ifelsecountdictstack odictstk sub dup 0 gt{{end}repeat}{pop}ifelse}bd/sfcl2{/odictstk countdictstack storecount/oopstk xs}bd/efcl2{stopped{$error/newerror F put}iffcl}bd/noload Z/startnoload{{/noload save store}if}bd/endnoload{{noload restore}if}bd/setcopies{level2{1 dict begin/NumCopies exch def currentdict end setpagedevice}{userdict/#copies 3 -1 roll put}ifelse}deflevel2 startnoload/ststpgdev{}def/dopgdev{}def/stpgdev{}def/buf Z/didstop T def/sfcl{/didstop T store/odictstk countdictstack storecount/oopstk xscurrentfile cvx stopped{$error/newerror F putdidstop{save/didstop xs/buf vmstatus exch sub exch pop dup 0 lt{pop 0}ifdup 64000 gt{pop 64000}if string store{currentfile buf readline{(}efcl)eq{exit}if}{/UnexpectedEOF errordict/rangecheck get exec}ifelse}loopdidstop restore}if}iffcl}bd/efcl{/didstop F storeexecstop}bdlevel2 endnoload level2 not startnoload/setpagedevice where{pop/realstpgdev/setpagedevice ld}if/SC_topddict Z/SC_spdict Z/$spusrdict F def/dopgdev{userdict/setpagedevice undef$spusrdict{userdict/setpagedevice/realstpgdev load put/$spusrdict F store}ifSC_topddict realstpgdev}bd/stpgdev{SC_topddict dup 3 -1 roll{SC_spdict 2 index known{SC_spdict 2 index getdup 3 -1 roll{put dup}forallpop put dup}{put dup}ifelse}forallpop pop}bd/ststpgdev{/setpagedevice where{userdict eq{/$spusrdict T store}if}ifuserdict/setpagedevice/stpgdev load put/SC_topddict 0 dict store/SC_spdict 3 dict begin/InputAttributes 0 dict def/Policies 0 dict def/OutputAttributes 0 dict defcurrentdictendstore}def/sfcl/sfcl2 ld/efcl/efcl2 ldlevel2 not endnoload%%EndFile%%BeginFile: lw8_basic-4.0/xdf{exch def}bd/:L/lineto/lw/setlinewidth/:M/moveto/rl/rlineto/rm/rmoveto/:C/curveto/:T/translate/:K/closepath/:mf/makefont/gS/gsave/gR/grestore/np/newpath12{ld}repeat/framewidth -1 def/QDframwid -1 def/numframes Z/mTS matrix def/$m matrix def/av 87 def/por T def/normland F def/psb-nosave{}def/pse-nosave{}def/us Z/psb{/us save store}bd/pse{us restore}bd/level3/languagelevel where{pop languagelevel 3 ge}{F}ifelsedeflevel2 startnoload/setjob{statusdict/jobname 3 -1 roll put}bd/devg/DeviceGray def/devr/DeviceRGB def/devc/DeviceCMYK deflevel2 endnoload level2 not startnoload/setjob{1 dict begin/JobName xdf currentdict end setuserparams}bd/devg[/DeviceGray]def/devr[/DeviceRGB]def/devc[/DeviceCMYK]deflevel2 not endnoload/pm Z/mT Z/sD Z/mTSsetup{mT $m currentmatrix mTS concatmatrix pop}bd/pmSVsetup{/pm save store}bd/initializepage{mT concat}bd/endp{pm restore}bd/adjRect{dup 2 mul 6 2 roll4 index sub exch 5 -1 roll sub exch4 2 roll4 index add exch 5 -1 roll add exch4 2 roll}bd/frame1up{gSmTS setmatrixQDframwid lw/setstrokeadjust where{pop T setstrokeadjust}ifclippath pathbbox2 index sub exch3 index sub exchcurrentlinewidth framewidth muladjRectnumframes dup 0 lt{pop 0}if{4 copyrScurrentlinewidth framewidthmul 4 muladjRect}repeatpop pop pop popgR}bd/$c devr def/rectclip where{pop/rC/rectclip ld}{/rC{np 4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:Kclip np}bd}ifelse/rectfill where{pop/rF/rectfill ld}{/rF{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rlfillgR}bd}ifelse/rectstroke where{pop/rS/rectstroke ld}{/rS{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:KstrokegR}bd}ifelse%%EndFile%%BeginFile: lw8_safeclipL12-1.0/rectclip where{pop/rCa/rectclip ld}{/rCa{np 01 index length 4 idiv{2 copy4 getintervalaload pop4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:K4 add}repeatclip nppop pop}bd}ifelse/savedstack Z/subsavedstack Z/execstring Z/saferCa{/execstring xs/odictstk countdictstack store/oopstk 0 storecount 0 ne{savedstack 0 eq{count 100 gt{count}{100}ifelsearray/savedstack xs}{count savedstack length gt{count array/savedstack xs}if}ifelsecount savedstack 0 3 -1 rollgetintervalastore/subsavedstack xs}{/subsavedstack 0 store}ifelseexecstring cvx stopped{$error/newerror F putnewpath}iffclsubsavedstack 0 ne{subsavedstack aload pop}if}bd%%EndFile%%BeginFile: lw8_level1_colorspace-2.0/G/setgray ld/:F1/setgray ld/:F/setrgbcolor ld/:F4/setcmykcolor where{pop/setcmykcolor ld}{{3{dup3 -1 roll adddup 1 gt{pop 1}if1 exch sub4 1 roll}repeatpopsetrgbcolor}bd}ifelse/:Fx{counttomark{0{G}0{:F}{:F4}}exch getexecpop}bd/$cs Z/:rg{devr :ss}bd/:sc{$cs :ss}bd/:dc{dup type/arraytype eq{0 get}ifdup/DeviceCMYK eq{pop devc}{/DeviceGray eq{devg}{devr}ifelse}ifelse/$cs xdf}bd/:sgl{}def/:dr{}bd/:fCRD{pop}bd/:ckcs{}bd/:ss{/$c xdf}bd%%EndFile%%BeginFile: lw8_bubn-2.1/$t Z/$p Z/$s Z/$o 1. def/2state? F def/ps Zlevel2 startnoload/pushcolor/currentrgbcolor ld/popcolor/setrgbcolor ld/setcmykcolor where{pop/currentcmykcolor where{pop/pushcolor/currentcmykcolor ld/popcolor/setcmykcolor ld}if}iflevel2 endnoload level2 not startnoload/pushcolor{currentcolorspace $c eq{currentcolor currentcolorspace T}{currentcmykcolor F}ifelse}bd/popcolor{{setcolorspace setcolor}{setcmykcolor}ifelse}bdlevel2 not endnoload/pushstatic{2state?$o$t$p$s$csps}bd/popstatic{/ps xs/$cs xs/$s xs/$p xs/$t xs/$o xs/2state? xs}bd/pushgstate{currentpointpushcolorcurrentlinewidthcurrentlinecapcurrentlinejoincurrentdash exch aload lengthnp clippath pathbbox$m currentmatrix aload pop}bd/popgstate{$m astore setmatrix2 index sub exch3 index sub exchrCarray astore exch setdashsetlinejoinsetlinecaplwpopcolornp :M}bd/bu{errordict/nocurrentpoint{pop 0 0}put2state?{pushgstategR}ifpushgstategRpushgstatepushstaticpm restoremTS setmatrix}bd/bn{/pm save storepopstaticpopgstategSpopgstate2state?{gSpopgstate}if}bd/cpat{pop 64 div setgray 8{pop}repeat}bd%%EndFile/currentpacking where {pop sc_oldpacking setpacking}if end%%EndProlog%%BeginSetupmd begin/mT[1 0 0 -1 30 761]def/sD 16 dict def{/Courier findfont[10 0 0 -10 0 0]:mf setfont}stopped{$error/newerror F put}if%%BeginResource: l2check%%Copyright: Copyright 1993 Adobe Systems Incorporated. All Rights Reserved.systemdict /languagelevel known{ systemdict /languagelevel get 1 eq }{ true }ifelse{initgraphics /Helvetica findfont 18 scalefont setfont72 600 moveto (Error: Your printer driver needs to be configured) dup show72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup showexch = =/Helvetica-Bold findfont 16 scalefont setfont72 520 moveto (Windows and Unix) show/Times-Roman findfont 16 scalefont setfont72 500 moveto (Select \252Language Level 1\272 in the PostScript options section) show72 480 moveto (of the Acrobat print dialog.) show/Helvetica-Bold findfont 16 scalefont setfont72 440 moveto (Macintosh) show/Times-Roman findfont 16 scalefont setfont72 420 moveto (In the Chooser, select your printer driver.) show72 400 moveto (Then select your printer and click the Setup button.) show72 380 moveto (Follow any on-screen dialogs that may appear.) showshowpagequit}if%%EndResourceuserdict /pdf_svglb currentglobal put true setglobal%%BeginResource: file Pscript_T42Hdr PSVERuserdict/ct_T42Dict 15 dict put ct_T42Dict begin/Is2015?{version cvi 2015 ge}bind def/AllocGlyphStorage{Is2015?{pop}{{string}forall}ifelse}bind def/Type42DictBegin{25 dict begin/FontName exch def/CharStrings 256 dict begin/.notdef 0 def currentdict end def/Encoding exch def/PaintType 0 def/FontType42 def/FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def/sfnts}bind def/Type42DictEnd{currentdict dup/FontName get exch definefont pop end}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{/GlyphDirectory 16 dict def sfnts 0 get dup 2 index(glyx)putinterval2 index(locx)putinterval pop pop}{pop pop}ifelse}bind def/AddT42Char{Is2015?{findfont/GlyphDirectory get begin def end pop pop}{findfont/sfnts get 4 indexget 3 index 2 index putinterval pop pop pop pop}ifelse}bind def/IDStr{dup 1add 2 mul string 0 1 3 index{1 index exch dup 2 mul exch 3 copy 256 idiv putexch 1 add exch 256 mod put}for exch pop}bind def%0 -8961 -256 -9472%G00GFFEncoding /TT3782070272t0CID%CIDT42Begin/CIDT42Begin{25 dict begin dup/WMode exch def 0 gt{/Metrics2 16 dict def/CDevProc{pop dup 1.9 gt 3 index neg .99 gt or{pop .85}{4 index add}ifelse}bind def/FontMatrix[0 1 -1 0 0 0]def}{/FontMatrix[1 0 0 1 0 0]def}ifelse/CIDMap exch def/CIDCount exch def/CIDSystemInfo 3 dict dup begin 3 -1 roll/Supplement exch def 3 -1 roll/Ordering exch def 3 -1 roll/Registry exch defend def/CIDFontName exch def/Encoding exch def 4 array astore cvx/FontBBoxexch def/CharStrings 2 dict dup begin/.notdef 0 def end def/GDBytes 2 def/CIDFontType 2 def/FontType 42 def/PaintType 0 def/sfnts}bind def/CIDT42End{CIDFontName currentdict end/CIDFont defineresource pop}bind def/T42CIDCP32K{/CIDFont findresource dup length dict copy dup/FID undef begin/CIDFontNameexch def/CIDMap exch def/CIDCount exch def/Metrics2 8 dict def CIDFontNamecurrentdict end/CIDFont defineresource pop}bind def/T42CIDCPR{/CIDFontfindresource dup length dict copy dup/FID undef begin/CDevProc{pop}def/CIDFontName exch def CIDFontName currentdict end/CIDFont defineresource pop}bind def/T0AddT42Char{/CIDFont findresource/GlyphDirectory get begin def endpop pop}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind def end%%EndResourceuserdict /pdf_svglb get setglobal/currentpacking where{pop currentpacking true setpacking}if%%BeginResource: procset pdfvars%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.%%Version: 5.0 6%%Title: definition of dictionary of variables used by PDF & PDFText procsetsuserdict /PDF 160 dict putuserdict /PDFVars 89 dict dup begin put/docSetupDone false def/InitAll 0 def/TermAll 0 def/DocInitAll 0 def/DocTermAll 0 def/_pdfEncodings 2 array def/_pdf_str1 1 string def/_pdf_i 0 def/_pdf_na 0 def/_pdf_showproc 0 def/_italMtx [1 0 .212557 1 0 0] def/_italMtx_WMode1 [1 -.212557 0 1 0 0] def/_italMtxType0 [1 0 .1062785 1 0 0] def/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def/_basefont 0 def/_basefonto 0 def/_pdf_oldCIDInit null def/_pdf_FontDirectory 30 dict def/_categories 10 dict def/_sa? true def/_ColorSep5044? false def/nulldict 0 dict def/_processColors 0 def/overprintstack null def/_defaulttransfer currenttransfer def/_defaultflatness currentflat def/_defaulthalftone null def/_defaultcolortransfer null def/_defaultblackgeneration null def/_defaultundercolorremoval null def/_defaultcolortransfer null defPDF begin[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W/applyInterpFunc/applystitchFunc/domainClip/encodeInput/initgs/int/limit/rangeClip/defineRes/findRes/setSA/pl%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver/? /! /| /: /+ /GetGlyphDirectory/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage/pdf_shfill /pdf_sethalftone] {null def} bind forallendend%%EndResourcePDFVars begin PDF begin%%BeginResource: procset pdfutil%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.%%Version: 4.0 2%%Title: Basic utilities used by other PDF procsets/bd {bind def} bind def/ld {load def} bd/bld {dup length dict begin{ null def } forallbindenddef} bd/dd { PDFVars 3 1 roll put } bd/xdd { exch dd } bd/Level2?systemdict /languagelevel known{ systemdict /languagelevel get 2 ge } { false } ifelsedef/Level1? Level2? not def/Level3?systemdict /languagelevel known{systemdict /languagelevel get 3 eq } { false } ifelsedef/getifknown {2 copy known { get true } { pop pop false } ifelse} bd/here {currentdict exch getifknown} bd/isdefined? { where { pop true } { false } ifelse } bd%%EndResource%%BeginResource: procset pdf%%Version: 5.0 7%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.%%Title: General operators for PDF, common to all Language Levels./cm { matrix astore concat } bd/d /setdash ld/f /fill ld/h /closepath ld/i {dup 0 eq {pop _defaultflatness} if setflat} bd/j /setlinejoin ld/J /setlinecap ld/M /setmiterlimit ld/n /newpath ld/S /stroke ld/w /setlinewidth ld/W /clip ld/initgs {0 setgray[] 0 d0 j0 J10 M1 wfalse setSA/_defaulttransfer load settransfer0 i/RelativeColorimetric rinewpath} bd/int {dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mulexch pop add exch pop} bd/limit {dup 2 index le { exch } if popdup 2 index ge { exch } if pop} bd/domainClip {Domain aload pop 3 2 rolllimit} [/Domain] bld/applyInterpFunc {0 1 DimOut 1 sub{dup C0 exch get exchdup C1 exch get exch3 1 roll1 index sub3 indexN exp mul addexchcurrentdict /Range_lo known{dup Range_lo exch get exchRange_hi exch get3 2 roll limit}{pop}ifelseexch} forpop} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld/encodeInput {NumParts 1 sub0 1 2 index{dup Bounds exch get2 index gt{ exit }{ dup3 index eq{ exit }{ pop } ifelse} ifelse} for3 2 roll popdup Bounds exch get exchdup 1 add Bounds exch get exch2 muldup Encode exch get exch1 add Encode exch getint} [/NumParts /Bounds /Encode] bld/rangeClip {exch dup Range_lo exch getexch Range_hi exch get3 2 rolllimit} [/Range_lo /Range_hi] bld/applyStitchFunc {Functions exch get execcurrentdict /Range_lo known {0 1 DimOut 1 sub {DimOut 1 add -1 rollrangeClip} for} if} [/Functions /Range_lo /DimOut] bld/pdf_flushfilters{aload length{ dup status1 index currentfile ne and{ dup flushfile closefile }{ pop }ifelse} repeat} bd/pdf_readstring{1 index dup length 1 sub getexch readstring popexch pdf_flushfilters} bind def/pdf_dictOp{3 2 roll10 dict copybegin_Filters dup length 1 sub get defcurrentdict exch exec_Filters pdf_flushfiltersend} [/_Filters] bld/pdf_image {{image} /DataSource pdf_dictOp} bd/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd/pdf_shfill {{sh} /DataSource pdf_dictOp} bd/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd/pdf_maskedImage{10 dict copy begin/miDict currentdict def/DataDict DataDict 10 dict copy defDataDict begin/DataSource_Filters dup length 1 sub getdefmiDict image_Filters pdf_flushfiltersendend} [/miDict /DataDict /_Filters] bld/RadialShade {40 dict begin/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch defgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 lt{c1x c1y r1 360 0 arcnxMin yMin movetoxMax yMin linetoxMax yMax linetoxMin yMax linetoxMin yMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 le{c2x c2y r2 360 0 arcnxMin yMin movetoxMax yMin linetoxMax yMax linetoxMin yMax linetoxMin yMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bd/GenStrips {40 dict begin/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch defgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bd%%EndResource%%BeginResource: procset pdflev2%%Version: 5.0 15%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.%%LanguageLevel: 2%%Title: PDF operators, with code specific for Level 2/docinitialize {PDF begin/_defaulthalftone currenthalftone dd/_defaultblackgeneration currentblackgeneration dd/_defaultundercolorremoval currentundercolorremoval dd/_defaultcolortransfer [currentcolortransfer] dd/_defaulttransfer currenttransfer ddendPDFVars /docSetupDone true put} bd/initialize {PDFVars /docSetupDone get {_defaulthalftone sethalftone/_defaultblackgeneration load setblackgeneration/_defaultundercolorremoval load setundercolorremoval_defaultcolortransfer aload pop setcolortransfer} iffalse setoverprint} bd/terminate { } bd/c /curveto ld/cs /setcolorspace ld/l /lineto ld/m /moveto ld/q /gsave ld/Q /grestore ld/sc /setcolor ld/setSA/setstrokeadjust ld/re {4 2 roll m1 index 0 rlineto0 exch rlinetoneg 0 rlinetoh} bd/concattransferfuncs {[ 3 1 roll /exec load exch /exec load ] cvx} bd/concatandsettransfer {/_defaulttransfer load concattransferfuncs settransfer} bd/concatandsetcolortransfer {_defaultcolortransfer aload pop8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll4 -1 roll 3 -1 roll concattransferfuncs 3 1 rollconcattransferfuncssetcolortransfer} bd/defineRes/defineresource ld/findRes/findresource ldcurrentglobaltrue systemdict /setglobal get exec[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]{ /Generic /Category findresource dup length dict copy /Category defineresource pop }forallsystemdict /setglobal get exec/ri{/findcolorrendering isdefined?{mark exchfindcolorrenderingcounttomark 2 eq{ type /booleantype eq{ dup type /nametype eq{ dup /ColorRendering resourcestatus{ pop popdup /DefaultColorRendering ne{/ColorRendering findresourcesetcolorrendering} if} if} if} if} ifcleartomark}{ pop} ifelse} bd/knownColorants? {pop false} bd/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forsetcolor} bd/sssetbackground { aload pop setcolor } bd%%EndResource%%BeginResource: procset pdftext%%Version: 5.0 6%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.%%Title: Text operators for PDFPDF /PDFText 78 dict dup begin put/docinitialize{/resourcestatus where {pop/CIDParams /ProcSet resourcestatus {pop popfalse /CIDParams /ProcSet findresource /SetBuildCompatible get exec} if} ifPDF beginPDFText /_pdfDefineIdentity-H known{ PDFText /_pdfDefineIdentity-H get exec}ifend} bd/initialize {PDFText begin} bd/terminate { end } bdLevel2?{/_safeput{3 -1 roll load 3 1 roll put}bd}{/_safeput{2 index load dup dup length exch maxlength ge{ dup length 5 add dict copy3 index xdd}{ pop }ifelse3 -1 roll load 3 1 roll put}bd}ifelse/pdf_has_composefont? systemdict /composefont known def/CopyFont {{1 index /FID ne 2 index /UniqueID ne and{ def } { pop pop } ifelse} forall} bd/Type0CopyFont{exchdup length dictbeginCopyFont[exchFDepVector{dup /FontType get 0 eq{1 index Type0CopyFont/_pdfType0 exch definefont}{/_pdfBaseFont exch2 index exec}ifelseexch}forallpop]/FDepVector exch defcurrentdictend} bdLevel2? {currentglobal true setglobal} if/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] defLevel2? {setglobal} if/modEnc {/_enc xdd/_icode 0 ddcounttomark 1 sub -1 0{indexdup type /nametype eq{_enc _icode 3 -1 roll put_icode 1 add}if/_icode xdd} forcleartomark_enc} bd/trEnc {/_enc xdd255 -1 0 {exch dup -1 eq{ pop /.notdef }{ Encoding exch get }ifelse_enc 3 1 roll put} forpop_enc} bd/TE {/_i xddStandardEncoding 256 array copy modEnc_pdfEncodings exch _i exch put} bd/TZ{/_usePDFEncoding xddfindfontdup length 6 add dictbegin{1 index /FID ne { def } { pop pop } ifelse} forall/pdf_origFontName FontName def/FontName exch defcurrentdict /PaintType known{ PaintType 2 eq {/PaintType 0 def} if }if_usePDFEncoding 0 ge{/Encoding _pdfEncodings _usePDFEncoding get defpop}{_usePDFEncoding -1 eq{counttomark 0 eq{ pop }{Encoding 256 array copymodEnc /Encoding exch def}ifelse}{256 arraytrEnc /Encoding exch def}ifelse}ifelsepdf_EuroProcSet pdf_origFontName known{pdf_origFontName pdf_AddEuroGlyphProc} ifLevel2?{currentdict /pdf_origFontName undef} ifFontName currentdictenddefinefont pop}bdLevel2?{/TZG{currentglobal true setglobal2 index _pdfFontStatus{2 index findfontfalse setglobal3 index findfonttrue setglobalne{2 index findfont dup rcheck{dup length dict begin{1 index /FID ne { def } { pop pop } ifelse} forallcurrentdict end}if3 index exch definefont pop}if} ifsetglobalTZ} bd}{/TZG {TZ} bd} ifelseLevel2?{currentglobal false setglobaluserdict /pdftext_data 5 dict putpdftext_databegin/saveStacks{pdftext_databegin/vmmode currentglobal deffalse setglobalcount array astore /os exch defendcountdictstack array dictstack pdftext_data exch /ds exch putcleardictstack pdftext_data /dscount countdictstack putpdftext_data /vmmode get setglobal} bind def/restoreStacks{pdftext_data /vmmode currentglobal put false setglobalclear cleardictstackpdftext_data /ds get duppdftext_data /dscount get 1 2 index length 1 sub{ get begin dup } forpop poppdftext_data /os get aload poppdftext_data /vmmode get setglobal} bind def/testForClonePrinterBug{currentglobal true setglobal/undefinedCategory /Generic /Category findresourcedup length dict copy /Category defineresource popsetglobalpdftext_data /saveStacks get execpdftext_data /vmmode currentglobal put false setglobal/undefined /undefinedCategory { resourcestatus } stoppedpdftext_data exch /bugFound exch putpdftext_data /vmmode get setglobalpdftext_data /restoreStacks get execpdftext_data /bugFound get} bind defendsetglobal/pdf_resourcestatuspdftext_data /testForClonePrinterBug get exec{{pdftext_data /saveStacks get execpdftext_data /os get dup dup length 1 subdup 1 sub dup 0 lt { pop 0 } ifexch 1 exch { get exch dup } forpop pop{ resourcestatus }stopped{clear cleardictstack pdftext_data /restoreStacks get exec{ pop pop } stopped pop false}{count array astore pdftext_data exch /results exch putpdftext_data /restoreStacks get exec pop poppdftext_data /results get aload pop}ifelse}}{ { resourcestatus } }ifelsebd}ifLevel2?{/_pdfUndefineResource{currentglobal 3 1 roll_pdf_FontDirectory 2 index 2 copy known{undef}{pop pop}ifelse1 index (pdf) exch _pdfConcatNames 1 index1 index 1 _pdfConcatNames 1 index5 index 1 _pdfConcatNames 1 index4{2 copy pdf_resourcestatus{pop 2 lt{2 copy findresource gcheck setglobal undefineresource}{pop pop}ifelse}{ pop pop}ifelse} repeatsetglobal} bd}{/_pdfUndefineResource { pop pop} bd}ifelseLevel2?{/_pdfFontStatus{currentglobal exch/Font pdf_resourcestatus{pop pop true}{false}ifelseexch setglobal} bd}{/_pdfFontStatusString 50 string def_pdfFontStatusString 0 (fonts/) putinterval/_pdfFontStatus{FontDirectory 1 index known{ pop true }{_pdfFontStatusString 6 42 getintervalcvs length 6 add_pdfFontStatusString exch 0 exch getinterval{ status } stopped{pop false}{{ pop pop pop pop true}{ false }ifelse}ifelse}ifelse} bd}ifelseLevel2?{/_pdfCIDFontStatus{/CIDFont /Category pdf_resourcestatus{pop pop/CIDFont pdf_resourcestatus{pop pop true}{false}ifelse}{ pop false }ifelse} bd}if/_pdfString100 100 string def/_pdfComposeFontName{dup length 1 eq{0 get1 indextype /nametype eq{_pdfString100 cvslength dup dup _pdfString100 exch (-) putinterval_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval2 index exch cvs lengthadd 1 add _pdfString100 exch 0 exch getintervalexch poptrue}{pop popfalse}ifelse}{false}ifelsedup {exch cvn exch} if} bd/_pdfConcatNames{exch_pdfString100 cvslength dup dup _pdfString100 exch (-) putinterval_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval3 -1 roll exch cvs lengthadd 1 add _pdfString100 exch 0 exch getintervalcvn} bind def/_pdfTextTempString 50 string def/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def/_pdf_CheckCIDSystemInfo{1 index _pdfTextTempString cvs(Identity) anchorsearch{pop pop pop pop true}{false_pdfRegOrderingArray{2 index exchanchorsearch{ pop pop pop true exit}{ pop }ifelse}forallexch popexch /CIDFont findresource/CIDSystemInfo get3 -1 roll /CMap findresource/CIDSystemInfo getexch3 -1 roll{2 copy/Supplement getexchdup type /dicttype eq{/Supplement get}{pop 0 }ifelsege}{ true }ifelse{dup /Registry get2 index /Registry get eq{/Ordering getexch /Ordering getdup type /arraytype eq{1 index type /arraytype eq{true1 index length 1 sub -1 0{dup 2 index exch get exch 3 index exch get ne{ pop false exit}if} forexch pop exch pop}{ pop pop false }ifelse}{eq}ifelse}{ pop pop false }ifelse}{ pop pop false }ifelse}ifelse} bind defpdf_has_composefont?{/_pdfComposeFont{2 copy _pdfComposeFontName not{2 index}if(pdf) exch _pdfConcatNamesdup _pdfFontStatus{ dup findfont 5 2 roll pop pop pop true}{4 1 roll1 index /CMap pdf_resourcestatus{pop poptrue}{false}ifelse1 index true exch{_pdfCIDFontStatus not{pop false exit}if}foralland{1 index 1 index 0 get _pdf_CheckCIDSystemInfo{3 -1 roll pop2 index 3 1 rollcomposefont true}{pop pop exch pop false}ifelse}{_pdfComposeFontName{dup _pdfFontStatus{exch pop1 index exchfindfont definefont true}{pop exch popfalse}ifelse}{exch popfalse}ifelse}ifelse{ true }{dup _pdfFontStatus{ dup findfont true }{ pop false }ifelse}ifelse}ifelse} bd}{/_pdfComposeFont{_pdfComposeFontName not{dup}ifdup_pdfFontStatus{exch pop dup findfont true}{1 indexdup type /nametype eq{pop}{cvn}ifelseeq{pop false}{dup _pdfFontStatus{dup findfont true}{pop false}ifelse}ifelse}ifelse} bd}ifelse/_pdfStyleDicts 4 dict dup begin/Adobe-Japan1 4 dict dup beginLevel2?{/Serif/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus{/HeiseiMin-W3}{/HeiseiMin-W3 _pdfCIDFontStatus{/HeiseiMin-W3}{/Ryumin-Light}ifelse}ifelsedef/SansSerif/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus{/HeiseiKakuGo-W5}{/HeiseiKakuGo-W5 _pdfCIDFontStatus{/HeiseiKakuGo-W5}{/GothicBBB-Medium}ifelse}ifelsedef/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus{/HeiseiMaruGo-W4}{/HeiseiMaruGo-W4 _pdfCIDFontStatus{/HeiseiMaruGo-W4}{/Jun101-Light-RKSJ-H _pdfFontStatus{ /Jun101-Light }{ SansSerif }ifelse}ifelse}ifelse/RoundSansSerif exch def/Default Serif def}{/Serif /Ryumin-Light def/SansSerif /GothicBBB-Medium def{(fonts/Jun101-Light-83pv-RKSJ-H) status}stopped{pop}{{ pop pop pop pop /Jun101-Light }{ SansSerif }ifelse/RoundSansSerif exch def}ifelse/Default Serif def}ifelseenddef/Adobe-Korea1 4 dict dup begin/Serif /HYSMyeongJo-Medium def/SansSerif /HYGoThic-Medium def/RoundSansSerif SansSerif def/Default Serif defenddef/Adobe-GB1 4 dict dup begin/Serif /STSong-Light def/SansSerif /STHeiti-Regular def/RoundSansSerif SansSerif def/Default Serif defenddef/Adobe-CNS1 4 dict dup begin/Serif /MKai-Medium def/SansSerif /MHei-Medium def/RoundSansSerif SansSerif def/Default Serif defenddefenddef/TZzero{/_wmode xdd/_styleArr xdd/_regOrdering xdd3 copy_pdfComposeFont{5 2 roll pop pop pop}{[0 1 _styleArr length 1 sub{_styleArr exch get_pdfStyleDicts _regOrdering 2 copy known{getexch 2 copy known not{ pop /Default }ifget}{pop pop pop /Unknown}ifelse}for]exch pop2 index 3 1 roll_pdfComposeFont{3 -1 roll pop}{findfont dup /FontName get exch}ifelse}ifelsedup /WMode 2 copy known{ get _wmode ne }{ pop pop _wmode 1 eq}ifelse{exch _wmode _pdfConcatNamesdup _pdfFontStatus{ exch pop dup findfont false}{ exch true }ifelse}{dup /FontType get 0 ne}ifelse{dup /FontType get 3 eq _wmode 1 eq and{_pdfVerticalRomanT3Font dup length 10 add dict copybegin/_basefont exchdup length 3 add dictbegin{1 index /FID ne {def}{pop pop} ifelse }forall/Encoding Encoding dup length array copydup 16#27 /quotesingle putdup 16#60 /grave put_regOrdering /Adobe-Japan1 eq{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}ifdefFontNamecurrentdictenddefinefontdef/Encoding _basefont /Encoding get def/_fauxfont true def}{dup length 3 add dictbegin{1 index /FID ne {def}{pop pop} ifelse }forallFontType 0 ne{/Encoding Encoding dup length array copydup 16#27 /quotesingle putdup 16#60 /grave put_regOrdering /Adobe-Japan1 eq{dup 16#5c /yen put}ifdef/_fauxfont true def} if} ifelse/WMode _wmode defdup dup /FontName exch defcurrentdictenddefinefont pop}{pop}ifelse/_pdf_FontDirectory 3 1 roll _safeput}bdLevel2?{/Tf {_pdf_FontDirectory 2 index 2 copy known{get exch 3 -1 roll pop}{pop pop}ifelseselectfont} bd}{/Tf {_pdf_FontDirectory 2 index 2 copy known{get exch 3 -1 roll pop}{pop pop}ifelseexch findfont exchdup type /arraytype eq{makefont}{scalefont}ifelsesetfont} bd}ifelse/cshow where{pop /pdf_cshow /cshow load dd/pdf_remove2 {pop pop} dd}{/pdf_cshow {exch forall} dd/pdf_remove2 {} dd} ifelse/pdf_xshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{_pdf_x _pdf_y moveto0rmoveto}ifelse_pdf_i 1 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdf_yshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{_pdf_x _pdf_y moveto0 exchrmoveto}ifelse_pdf_i 1 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdf_xyshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{{_pdf_na _pdf_i 1 add get} stopped{ pop pop pop}{_pdf_x _pdf_y movetormoveto}ifelse}ifelse_pdf_i 2 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bdLevel2? _ColorSep5044? not and{/pdfxs {{xshow} stopped {pdfl1xs} if} bd/pdfys {{yshow} stopped {pdfl1ys} if} bd/pdfxys {{xyshow} stopped {pdfl1xys} if} bd}{/pdfxs /pdfl1xs load dd/pdfys /pdfl1ys load dd/pdfxys /pdfl1xys load dd} ifelse/pdf_charpath {false charpath} bd/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd/pdf_strokepath{{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 false charpathcurrentpoint S moveto} bindexch pdf_cshow} bd/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bdLevel2? {currentglobal true setglobal} if/d0/setcharwidth ld/nND {{/.notdef} repeat} bd/T3Defs {/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec}def/BuildGlyph {exch beginGlyphProcs exch get execend} def/_pdfT3Font true def} bd/_pdfBoldRomanWidthProc{stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth0 0} bd/_pdfType0WidthProc{dup stringwidth 0 0 moveto2 index true charpath pathbbox0 -17 index 2 div .88setcachedevice2pop0 0} bd/_pdfType0WMode1WidthProc{dup stringwidthpop 2 div neg -0.882 copymoveto0 -15 -1 roll true charpath pathbboxsetcachedevice} bd/_pdfBoldBaseFont11 dict begin/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding cHexEncoding def/_setwidthProc /_pdfBoldRomanWidthProc load def/_bcstr1 1 string def/BuildChar{exch begin_basefont setfont_bcstr1 dup 0 4 -1 roll putdup_setwidthProc3 copymovetoshow_basefonto setfontmovetoshowend}bdcurrentdictenddefpdf_has_composefont?{/_pdfBoldBaseCIDFont11 dict begin/CIDFontType 1 def/CIDFontName /_pdfBoldBaseCIDFont def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/_setwidthProc /_pdfType0WidthProc load def/_bcstr2 2 string def/BuildGlyph{exch begin_basefont setfont_bcstr2 1 2 index 256 mod put_bcstr2 0 3 -1 roll 256 idiv put_bcstr2 dup _setwidthProc3 copymovetoshow_basefonto setfontmovetoshowend}bdcurrentdictenddef/_pdfDefineIdentity-H{/Identity-H /CMap PDFText /pdf_resourcestatus get exec{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo3 dict begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defcurrentdictenddef/CMapName /Identity-H def/CMapVersion 1 def/CMapType 1 def1 begincodespacerange<0000> <ffff>endcodespacerange1 begincidrange<0000> <ffff> 0endcidrangeendcmapCMapName currentdict/CMap defineresource popendend} ifelse} def} if/_pdfVerticalRomanT3Font10 dict begin/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/_bcstr1 1 string def/BuildChar{exch begin_basefont setfont_bcstr1 dup 0 4 -1 roll putdup_pdfType0WidthProcmovetoshowend}bdcurrentdictenddefLevel2? {setglobal} if/MakeBoldFont{dup /ct_SyntheticBold known{dup length 3 add dict beginCopyFont/ct_StrokeWidth .03 0 FontMatrix idtransform pop def/ct_SyntheticBold true defcurrentdictenddefinefont}{dup dup length 3 add dictbeginCopyFont/PaintType 2 def/StrokeWidth .03 0 FontMatrix idtransform pop def/dummybold currentdictenddefinefontdup /FontType get dup 9 ge exch 11 le and{_pdfBoldBaseCIDFontdup length 3 add dict copy begindup /CIDSystemInfo get /CIDSystemInfo exch def/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont/_basefont exch def/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont/_basefonto exch defcurrentdictend/CIDFont defineresource}{_pdfBoldBaseFontdup length 3 add dict copy begin/_basefont exch def/_basefonto exch defcurrentdictenddefinefont}ifelse}ifelse} bd/MakeBold {1 index_pdf_FontDirectory 2 index 2 copy known{get}{exch pop}ifelsefindfontdup/FontType get 0 eq{dup /WMode known {dup /WMode get 1 eq }{false} ifelseversion length 4 geand{version 0 4 getinterval cvi 2015 ge }{true}ifelse{/_pdfType0WidthProc}{/_pdfType0WMode1WidthProc}ifelse_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put{MakeBoldFont} Type0CopyFont definefont}{dup /_fauxfont known not 1 index /SubstMaster known not and{_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load putMakeBoldFont}{2 index 2 index eq{ exch pop }{dup length dict beginCopyFontcurrentdictenddefinefont}ifelse}ifelse}ifelsepop popdup /dummybold ne{/_pdf_FontDirectory exch dup _safeput }{ pop }ifelse}bd/MakeItalic {_pdf_FontDirectory exch 2 copy known{get}{exch pop}ifelsedup findfontdup /FontInfo 2 copy known{get/ItalicAngle 2 copy known{get 0 eq }{ pop pop true}ifelse}{ pop pop true}ifelse{exch popdup /FontType get 0 eq Level2? not and{ dup /FMapType get 6 eq }{ false }ifelse{dup /WMode 2 copy known{get 1 eq{ _italMtx_WMode1Type0 }{ _italMtxType0 }ifelse}{ pop pop _italMtxType0 }ifelse}{dup /WMode 2 copy known{get 1 eq{ _italMtx_WMode1 }{ _italMtx }ifelse}{ pop pop _italMtx }ifelse}ifelsemakefontdup /FontType get 42 eq Level2? not or{dup length dict beginCopyFontcurrentdictend}if1 index exchdefinefont pop/_pdf_FontDirectory exch dup _safeput}{pop2 copy ne{/_pdf_FontDirectory 3 1 roll _safeput}{ pop pop }ifelse}ifelse}bd/MakeBoldItalic {/dummybold exchMakeBold/dummyboldMakeItalic}bdLevel2?{/pdf_CopyDict{1 index length add dict copy}def}{/pdf_CopyDict{1 index length add dict1 index wcheck{ copy }{ begin{def} forallcurrentdictend}ifelse}def}ifelse/pdf_AddEuroGlyphProc{currentdict /CharStrings known{CharStrings /Euro known not{dup/CharStringsCharStrings 1 pdf_CopyDictbegin/Euro pdf_EuroProcSet 4 -1 roll get defcurrentdictenddef/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def/pdf_PathOps /pdf_PathOps load def/Symbol eq{/Encoding Encoding dup length array copydup 160 /Euro put def}if}{ pop}ifelse}{ pop}ifelse}defLevel2? {currentglobal true setglobal} if/pdf_PathOps 4 dict dup begin/m {moveto} def/l {lineto} def/c {curveto} def/cp {closepath} defenddef/pdf_PSBuildGlyph{gsave8 -1 roll pop7 1 rollcurrentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelsedup 9 1 roll{currentdict /StrokeWidth 2 copy known{get 2 div5 1 roll4 -1 roll 4 index sub4 1 roll3 -1 roll 4 index sub3 1 rollexch 4 index add exch4 index add5 -1 roll pop}{pop pop}ifelse}ifsetcachedevicepdf_PathOps beginexecend{currentdict /StrokeWidth 2 copy known{ get }{ pop pop 0 }ifelsesetlinewidth stroke}{fill}ifelsegrestore} def/pdf_EuroProcSet 13 dict defpdf_EuroProcSetbegin/Courier-Bold{600 0 6 -12 585 612{385 274 m180 274 l179 283 179 293 179 303 c179 310 179 316 180 323 c398 323 l423 404 l197 404 l219 477 273 520 357 520 c409 520 466 490 487 454 c487 389 l579 389 l579 612 l487 612 l487 560 l449 595 394 612 349 612 c222 612 130 529 98 404 c31 404 l6 323 l86 323 l86 304 l86 294 86 284 87 274 c31 274 l6 193 l99 193 l129 77 211 -12 359 -12 c398 -12 509 8 585 77 c529 145 l497 123 436 80 356 80 c285 80 227 122 198 193 c360 193 lcp600 0 m}pdf_PSBuildGlyph} def/Courier-BoldOblique /Courier-Bold load def/Courier{600 0 17 -12 578 584{17 204 m97 204 l126 81 214 -12 361 -12 c440 -12 517 17 578 62 c554 109 l501 70 434 43 366 43 c266 43 184 101 154 204 c380 204 l400 259 l144 259 l144 270 143 281 143 292 c143 299 143 307 144 314 c418 314 l438 369 l153 369 l177 464 249 529 345 529 c415 529 484 503 522 463 c522 391 l576 391 l576 584 l522 584 l522 531 l473 566 420 584 348 584 c216 584 122 490 95 369 c37 369 l17 314 l87 314 l87 297 l87 284 88 272 89 259 c37 259 lcp600 0 m}pdf_PSBuildGlyph} def/Courier-Oblique /Courier load def/Helvetica{556 0 24 -19 541 703{541 628 m510 669 442 703 354 703 c201 703 117 607 101 444 c50 444 l25 372 l97 372 l97 301 l49 301 l24 229 l103 229 l124 67 209 -19 350 -19 c435 -19 501 25 509 32 c509 131 l492 105 417 60 343 60 c267 60 204 127 197 229 c406 229 l430 301 l191 301 l191 372 l455 372 l479 444 l194 444 l201 531 245 624 348 624 c433 624 484 583 509 534 ccp556 0 m}pdf_PSBuildGlyph} def/Helvetica-Oblique /Helvetica load def/Helvetica-Bold{556 0 12 -19 563 710{563 621 m537 659 463 710 363 710 c216 710 125 620 101 462 c51 462 l12 367 l92 367 l92 346 l92 337 93 328 93 319 c52 319 l12 224 l102 224 l131 58 228 -19 363 -19 c417 -19 471 -12 517 18 c517 146 l481 115 426 93 363 93 c283 93 254 166 246 224 c398 224 l438 319 l236 319 l236 367 l457 367 l497 462 l244 462 l259 552 298 598 363 598 c425 598 464 570 486 547 c507 526 513 517 517 509 ccp556 0 m}pdf_PSBuildGlyph} def/Helvetica-BoldOblique /Helvetica-Bold load def/Symbol{750 0 20 -12 714 685{714 581 m650 645 560 685 465 685 c304 685 165 580 128 432 c50 432 l20 369 l116 369 l115 356 115 347 115 337 c115 328 115 319 116 306 c50 306 l20 243 l128 243 l165 97 300 -12 465 -12 c560 -12 635 25 685 65 c685 155 l633 91 551 51 465 51 c340 51 238 131 199 243 c555 243 l585 306 l184 306 l183 317 182 326 182 336 c182 346 183 356 184 369 c614 369 l 644 432 l199 432 l233 540 340 622 465 622 c555 622 636 580 685 520 ccp750 0 m}pdf_PSBuildGlyph} def/Times-Bold{500 0 16 -14 478 700{367 308 m224 308 l224 368 l375 368 l380 414 l225 414 l230 589 257 653 315 653 c402 653 431 521 444 457 c473 457 l473 698 l444 697 l441 679 437 662 418 662 c393 662 365 700 310 700 c211 700 97 597 73 414 c21 414 l16 368 l69 368 l69 359 68 350 68 341 c68 330 68 319 69 308 c21 308 l16 262 l73 262 l91 119 161 -14 301 -14 c380 -14 443 50 478 116 c448 136 l415 84 382 40 323 40 c262 40 231 77 225 262 c362 262 lcp500 0 m}pdf_PSBuildGlyph} def/Times-BoldItalic{500 0 9 -20 542 686{542 686 m518 686 l513 673 507 660 495 660 c475 660 457 683 384 683 c285 683 170 584 122 430 c58 430 l34 369 l105 369 l101 354 92 328 90 312 c34 312 l9 251 l86 251 l85 238 84 223 84 207 c84 112 117 -14 272 -14 c326 -14 349 9 381 9 c393 9 393 -10 394 -20 c420 -20 l461 148 l429 148 l416 109 362 15 292 15 c227 15 197 55 197 128 c197 162 204 203 216 251 c378 251 l402 312 l227 312 l229 325 236 356 241 369 c425 369 l450 430 l255 430 l257 435 264 458 274 488 c298 561 337 654 394 654 c437 654 484 621 484 530 c484 516 l516 516 lcp500 0 m}pdf_PSBuildGlyph} def/Times-Italic{500 0 23 -10 595 692{399 317 m196 317 l199 340 203 363 209 386 c429 386 l444 424 l219 424 l246 514 307 648 418 648 c448 648 471 638 492 616 c529 576 524 529 527 479 c549 475 l595 687 l570 687 l562 674 558 664 542 664 c518 664 474 692 423 692 c275 692 162 551 116 424 c67 424 l53 386 l104 386 l98 363 93 340 90 317 c37 317 l23 279 l86 279 l85 266 85 253 85 240 c85 118 137 -10 277 -10 c370 -10 436 58 488 128 c466 149 l424 101 375 48 307 48 c212 48 190 160 190 234 c190 249 191 264 192 279 c384 279 lcp500 0 m}pdf_PSBuildGlyph} def/Times-Roman{500 0 10 -12 484 692{347 298 m171 298 l170 310 170 322 170 335 c170 362 l362 362 l374 403 l172 403 l184 580 244 642 308 642 c380 642 434 574 457 457 c481 462 l474 691 l449 691 l433 670 429 657 410 657 c394 657 360 692 299 692 c204 692 94 604 73 403 c22 403 l10 362 l70 362 l69 352 69 341 69 330 c69 319 69 308 70 298 c22 298 l10 257 l73 257 l97 57 216 -12 295 -12 c364 -12 427 25 484 123 c458 142 l425 101 384 37 316 37 c256 37 189 84 173 257 c335 257 lcp500 0 m}pdf_PSBuildGlyph} defendLevel2? {setglobal} ifcurrentdict readonly pop end%%EndResourcePDFText begin[userdict /pdf_svglb currentglobal put true setglobal39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron0 TE[1/dotlessi/caron 39/quotesingle 96/grave 127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark/scaron/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis1 TEenduserdict /pdf_svglb get setglobal%%BeginResource: pdfasc.prc%%Version: 4.0 2%%Copyright: Copyright 1992-1997 Adobe Systems Incorporated. All Rights Reserved./AS {9 dict begin/shrink? xdd/Pury xdd/Purx xdd/Plly xdd/Pllx xddgsave newpath clippath pathbbox newpath grestore/Dury xdd/Durx xdd/Dlly xdd/Dllx xddDurx Dllx sub Dury Dlly subPury Plly sub div exch Purx Pllx sub div2 copy gt { exch } if popDurx Dllx add 2 div Dury Dlly add 2 div translateshrink? { dup scale } { pop } ifelsePurx Pllx add -2 div Pury Plly add -2 div translateend} [/shrink? /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly]bld%%EndResourcecurrentdict readonly popend end/currentpacking where {pop setpacking}ifPDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF beginPDFVars/DocInitAll get exec PDFVars/InitAll get execPDFVars/TermAll get exec end end PDF /docinitialize get exec
%%EndSetup%%Page: 1 1%%BeginPageSetupmTSsetuppmSVsetupinitializepage%%EndPageSetupgS 0 0 552 728 rC1 G0 0 :Mpsb1 -1 scale -30 -761  translate90 rotate 0 -612 translate162.942 -106.996 translatePDFVars begin PDF begin PDFVars/InitAll get exec22.3141 162.231 421.488 501.529 reWn[/DeviceGray] cs 0 scuserdict /pdf_svglb currentglobal put true setglobalct_T42Dict begin-0.164 -0.445 0.992 1.023 256 array 0 1 255 {1 index exch /.notdef put} for  /ANANMP+HelveticaType42DictBegin[<00010000000a000a000a000a637674208d953e20000000ac000003626670676de644d5e30000041000000322676c7966728f6373000017b000000b58686561647b3eea620000073400000036686865610cca06840000076c00000024686d747897a3830900000790000006206c6f63610010407600000db0000006246d61787009bf0222000013d400000020707265702482325a000013f4000003bb6764697200000000000000000000000005c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c004200500051008400be012503daff680018003b0098009c009f00a100c100ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e103af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af00c001000145016b0174019301950240028202b404850517fefd00060029004700470048006f008800b400b900c400f200f901ef02180310037403c5ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb0106013001430150017d0194019501d3022a025502580277027802e6034e035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c0215022b0274029302ab02c202ce03690395039903df03f5043e050205a105e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c900c900e3011c00ed00f800f901000112011a0132014d014d014e014f01660169019e01ba01ba01be01e301ef01f602000200020902110217021c02530262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb04050413041504470449008c046d049a049a04a604a804b204cf0539053e054e055605800589058c036305d105d6067e068e06b206ef06f00728074c076f078c00b400c900c000c10000000000000000000000000004012400af0032006e0063014401620096014301a10161008a00740064018801ef01700028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd803aa00d70093006c0000008000a70442001d0597001d00820030000040292a292827262524232221201f1e1d1c1b1a191817161514131211100d0c0b0a090807060504030201002c4523466020b02660b004262348482d2c452346236120b02661b004262348482d2c45234660b0206120b04660b004262348482d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0406120b06660b004262348482d2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b09051582320b00d44235921212d2c20204518684420b001602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0172344b0177ae5182d2cb002254661658a46b040608b482d2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545b019236a4445b01a23444565234520b00325606a20b009234223688a6a606120b0005258b21a401a4523614459b0005058b219401945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b000525823b002253823b002256538008a63381b212121212159012d2c456920b00943b0022660b00325b005254961b0805358b21940194523616844b21a401a4523606a44b209191a45652345604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c764520b003254523616818236860442d2c7645b00325452361682318456860442d2c7645b0032545616823452361442d2c4569b014b0324b505821b0205961442d00000001000000000000446488745f0f3cf501010800000000015f4e858000000000b53f1b40feaafc6e07f40834000000090001000100000000000100000629fe290000081ffeaafeb307f400010000000000000000000000000000018805c700a1000000000239000002390000023900ed02d700680473000004730040071d0042055600590187006502aa008e02aa0044031d004e04ac004c023900aa02aa0055023900af0239000004730040047300c4047300400473003104730034047300420473004d0473004b0473004204730049023900e3023900e304ac000e04ac004c04ac000e0473009c081f00e10556001e0556009705c7005a05c700a5055600af04e300af0639006305c700a1023900c9040000230556009c0473009c06aa009705c7009c06390050055600af0639005005c700b40556006004e3002105c700aa05560034078d00250556002a0556002a04e3002f023900800239ffbb0239002f03c100330473000002aa003a04730052047300760400003b04730038047300480239001c0473003d0473008401c7008401c7ffda0400008001c7008906aa0084047300840473003b047300760473003c02aa00890400004202390017047300800400000b05c700120400000b040000150400003402acffd5021400b602ac002a04ac00020556001e0556001e05c7005a055600af05c7009c0639005005c700aa0473005204730052047300520473005204730052047300520400003b0473004804730048047300480473004802390089023900020239ffe602390010047300840473003b0473003b0473003b0473003b0473003b04730080047300800473008004730080047300500333006f04730068047300380473004b02cd0089044cfff504e300c705e5001505e50013080000ef02aa00c102aa004804640028080000100639004205b400330464002804640028046400280473ffe1049cffc903f4002b05b400a9069600830464ffea0231ff5d02f6003b02ec003106250054071d004904e3005c04e300ba02aa00e804ac004c0464ffef047300280464002804e5ffff047300c2047300c2080000ed023900000556001e0556001e0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7008401c700aa0464002803f4003c040000150556002a0156feaa05f4006402aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa004e0800000e0556001e055600af0556001e055600af055600af023900890239ffe602390010023900020639005006390050065200690639005005c700aa05c700aa05c700aa023900bd02aa001e02aaffe902aa000802aa000b02aa00ec02aa007802aa006502aa003302aa00a002aa001e0473ffe801c7ffd7055600600400004204e3002f04000034021400b605c700210473003d0556002a04000015055600ae0473008004ac004c04ac006402aa005702aa000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d023900b4055600600400004205c7005a0400003b05c7005a0400003b047300380556001e047300520556001e047300520556001e0473005205c7005a0400003b05c7005a0400003b05c700a504730038055600af04730048055600af04730048055600af04730048055600af04730048055600af04730048063900630473003d063900630473003d063900630473003d0473003d05c700a10473008405c700a10473ffdd023900c9023900bd023900c9023900bd0239003501c7ffd9063900c9038e00840400002301c7ffb9055600270400fffa0473009c01c700890473009c01c700890473009c01c700890473009c01c7008905c7009c0473008405c7002f0473ffff05c7009c0473008404730084063900500473003b063900500473003b063900500473003b05c700b402aa008905c7003e02aa000c05c700b402aa00890556006004000042055600600400004204e300210239001704e300210239001704e300210239001705c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473008005c700aa04730080078d002505c700120556002a0400001504e3002f0400003404e3002f04000034055600600400004204e30021023900170473004b02aa003a02aa00c102aa001e02aaffe902aa000802aa000b02aa00ec02aa004802aa007802aa003302aa001e0239000002aa006502aa00a0023900000239000005c70021063900630473003d0473009c01c700820556009c0400008005c7009c0473008405c700b402aa0082000000000000006600000066000000660000006600000066000000660000006600000066000000660000006600000066000000660000006600000066000000660000006600000066000000a4000000a40000017e000001c8000002de00000434000004ce000005f40000071e000007b20000091600000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000a4200000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800000b5800010000018800530007005b0006000200100010002b000007e80161000600014118008001a6009001a600a001a600030069018b0079018b0089018b0099018b00040089018b0099018b00a9018b00b9018bb2040840ba0179001a014a400b041f5414191f180a0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a0019f0064001f01a50025017a00480028019ab3296c1f60410a01a9007001a9008001a90003008001a9000101a9b21e321fbe012c00250401001f0126001e0401b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f921db80101b21f911db80101b21f751db80201b61f6d29961f6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f351de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2254a1fba019b0025017ab349293896b8017bb348283125b8017a403648289629482725294c1f252946272729482756c80784075b07410732072b072807260721071b071408120810080e080c080a08080807b801acb23f1f06bb01ab003f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb70804080208000814b8ffe0b40000010014b801abb41000000100b801abb606100000010006b801adb300000100b801ad401f04000001000410000001001002000001000200000001000002010802004a00b0018db806008516763f183f123e113946443e113946443e113946443e113946443e113946443e11394660443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b376706a66456523456023456560234560b08b766818b080622020b16a704565234520b003266062636820b003266165b070236544b06a234420b176664565234520b003266062636820b003266165b066236544b0762344b10066455458b166406544b27640764523614459b36242725d456523456023456560234560b089766818b080622020b172424565234520b003266062636820b003266165b042236544b072234420b1625d4565234520b003266062636820b003266165b05d236544b0622344b1005d455458b15d406544b262406245236144592b2b2b2b456953427374b8019a2045694b20b02853b049515a58b020615944b801a620456944750000>[2905 ] AllocGlyphStorage]def 108 44 PrepFor2015Type42DictEnd1 0 0 <000200a10000052f05bd00030007003e402105062f02010004072f03000a05042f0303021a0906072f01001908098821637b182b2b4ef43c4dfd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c31303311211127112111a1048eb8fce205bdfa43b8044dfbb300>/ANANMP+Helvetica AddT42Char 1 102 17 <000100af0000018000da000300264013012a030a0517171a01640019040564216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1dada00>/ANANMP+Helvetica AddT42Char 1 164 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c35070d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034001b0d2601251a2609250526160e18280014001228011b081828001006122801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b2b2b2b2b2b2b81005d001716111007022120272611343712211236113402232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f932f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013bfed5fedddb85cb00>/ANANMP+Helvetica AddT42Char 1 382 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c39a268ec003f68a1359a6fa6e03f6>/ANANMP+Helvetica AddT42Char 1 456 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e84018702082a085a196b197c197c1cb519050022010f041c0e1921071c19040100051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f1217390111123912393911391239005d31304379401c04190c2511260b120e2800091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d36123f01363736353426232207060723363736213212151407060f01060706072115214a85c1c0813452967db9472604b70342750128f6e37946b5896238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a47654c3631576aaa>/ANANMP+Helvetica AddT42Char 1 734 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d069626014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b3524050735310d1896274411b8014a400f0a382e6f021f2920810327023347321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10ed111239011112393130437940362f301926000905261d2522260600032800040308300a28011c231f28001a251828010401072800092f0728001e211b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d0402353316171633323635342623220607351e013332373635342623220706072334373621321615140706071e01151400230116e5bc0c2846b78eacb5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffef2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3b98452331d1fb180cdfefe00>/ANANMP+Helvetica AddT42Char 1 1076 23 <000200340000042f059c0002000d005c402209020a080d010202be12060607020601050708030106070a02750b05ef030c070403b80117b501960d08ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c1139390111123911123939872e2b047d10c50f3130011109011121350133113315231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f9dfea200>/ANANMP+Helvetica AddT42Char 1 1230 24 <00010042ffdc041c0580002000bb402b4812881f02390c461357136713043a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab80122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f0038202247211076c418d4edf5edc4003feded3ffd12392fe4f4ed1112390111123939123939872e2b7d10c5001239011112393931301843794028181f01090226031e00280001001f20051c0728010918072801011f042800061b04280008190a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534262322060727132115210336373633320415140221222427fd127d4054a09ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc>/ANANMP+Helvetica AddT42Char 1 1524 25 <0002004dffdb0423059e001b002700a94039771a0117082508271958198600870188090747080a212721350e0e1403c707351b052735140d032902811e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600060526200f1e280126152428001c131e2801060003280104031f1021280125162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b81818181015d005d001615232627262322020336373633320415140223220011103712211236353426232206151416330347bdb21023418497b20a3e5e566ab4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fefc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b9>/ANANMP+Helvetica AddT42Char 1 1822 26 <0001004b0000042f0580000f00534036050b1902380b3a0c390d4a0d550256046202b7070a7c0db40dc50d030209010d0e3a000f04090c020d0800006f0e083809ac0e1147101076c418d4f4ed10e511123939003f3f3cfd3c391239015d31305d01150602070607060723121336372135042f45e558572d1d2ec744e88997fce805809d43feb4c0bb9a63dc019a0196eeadb500>/ANANMP+Helvetica AddT42Char 1 1970 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f5913640165096b0f691377250949107b197623722573277c317c32881987208727882e883198190d47083208250e0225320b3511112c05351e0517352c0d023821b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f022801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b2b2b2b81818181015d005d00363534262322061514163312363534262322061514163300272635343633321615140706071617161514022322243534363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea44265059335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a302a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>/ANANMP+Helvetica AddT42Char 1 2326 28 <00020049ffd80411059a001b002700ab402e19052b0528164806580568058919881a981a09460807212727350a0a182135100504351bc7180d07023c071e3114b80155400b0d00291b8124380d2947281076c418d4edf4ed10f5fd397d4b52787a2f18003feded3fed12392fed1112393130437940341f26191a0b13010312250226220f24280020111e28010319002800260b242800230e2128011f13212801011a042800250c2728002b2b2b2b012b2b2b2b2b2b81818181015d01161716333236130e012322023534123320131615100702212226350036353426232206151416330110086b374581b6263cb166cff1eee8013977424f83fec7d2da0232b19f7b849b8895015a95391ed701495f4d0102cbc30128fee69be9fef9cbfeaedca601268db09e9bb1948ca500>/ANANMP+Helvetica AddT42Char 1 2626 48 <000100970000061705bd001300cb405944014b03020601090316011903d7010513011c03140b1b0c57015803d401db03d40bdb0c0a040a040d45028602045102970202290a280d380a380d4702570276020725640d0a0203120301020b0c120306081517171a040405b8019b400d0a1f030b06fd0c0102fd0d1f12b8019bb6130019147670182b4e10f43c4dfde419f43939f4393918e4fd3c4e10456544e6003f173c3f3c1217394b5279b10d0cb801aab40201020a0bb801aab202020387054d2e7afd047dc487052e7afd047dc43130005d727101725d71132109012111231134363501230115141615112397011d01a601a3011abd04fe5dc5fe5a05be05bdfb2604dafa4303632dd077fb2904d72d36dd34fc9d>/ANANMP+Helvetica AddT42Char /ANANMP+Helvetica findfont /CharStrings get begin/.notdef 0 def/period 17 def/zero 19 def/one 20 def/two 21 def/three 22 def/four 23 def/five 24 def/six 25 def/seven 26 def/eight 27 def/nine 28 def/M 48 defend/ANANMP+Helvetica findfont /Encoding getdup 0 /.notdef putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdup 55 /seven putdup 56 /eight putdup 57 /nine putdup 77 /M putpopenduserdict /pdf_svglb get setglobal[/N24/ANANMP+Helvetica 1 TZG35.6975 618.278 m/N24 [0 -12.3285 12.3285 0 0 0] Tf(198) show(1)[-17.1502 ] pdfys(198) show(3)[-17.3339 ] pdfys(198) show(5)[-16.9665 ] pdfys(198) show(7)[-17.3339 ] pdfys(198) show(9)[-17.1502 ] pdfys(199) show(1)[-17.1502 ] pdfys(199) show(3)[-17.1502 ] pdfys(199) show(5)[-17.3339 ] pdfys(199) show(7)[-16.9665 ] pdfys(199) show(9)[-17.3339 ] pdfys(2001) show0.095993 wn54.282 602.173 m51.154 602.173 l54.282 597.573 m51.154 597.573 l54.282 592.788 m48.026 592.788 l54.282 588.004 m51.154 588.004 l54.282 583.404 m51.154 583.404 l54.282 578.62 m51.154 578.62 l54.282 573.836 m48.026 573.836 l54.282 569.235 m51.154 569.235 l54.282 564.451 m51.154 564.451 l54.282 559.667 m51.154 559.667 l54.282 554.883 m48.026 554.883 l54.282 550.283 m51.154 550.283 l54.282 545.498 m51.154 545.498 l54.282 540.714 m51.154 540.714 l54.282 536.114 m48.026 536.114 l54.282 531.514 m51.154 531.514 l54.282 526.729 m51.154 526.729 l54.282 521.945 m51.154 521.945 l54.282 517.345 m48.026 517.345 l54.282 512.561 m51.154 512.561 l54.282 507.777 m51.154 507.777 l54.282 503.176 m51.154 503.176 l54.282 498.392 m48.026 498.392 l54.282 493.608 m51.154 493.608 l54.282 488.824 m51.154 488.824 l54.282 484.224 m51.154 484.224 l54.282 479.439 m48.026 479.439 l54.282 474.655 m51.154 474.655 l54.282 470.055 m51.154 470.055 l54.282 465.271 m51.154 465.271 l54.282 460.487 m48.026 460.487 l54.282 455.886 m51.154 455.886 l54.282 451.286 m51.154 451.286 l54.282 446.502 m51.154 446.502 l54.282 441.718 m48.026 441.718 l54.282 437.118 m51.154 437.118 l54.282 432.333 m51.154 432.333 l54.282 427.549 m51.154 427.549 l54.282 422.765 m48.026 422.765 l54.282 418.165 m51.154 418.165 l54.282 413.381 m51.154 413.381 l54.282 408.596 m51.154 408.596 l54.282 403.996 m48.026 403.996 l54.282 399.212 m51.154 399.212 l54.282 394.428 m51.154 394.428 l54.282 389.828 m51.154 389.828 l54.282 385.043 m48.026 385.043 l54.282 380.259 m51.154 380.259 l54.282 375.659 m51.154 375.659 l54.282 371.059 m51.154 371.059 l54.282 366.275 m48.026 366.275 l54.282 361.49 m51.154 361.49 l54.282 356.706 m51.154 356.706 l54.282 352.106 m51.154 352.106 l54.282 347.322 m48.026 347.322 l54.282 342.537 m51.154 342.537 l54.282 337.937 m51.154 337.937 l54.282 333.153 m51.154 333.153 l54.282 328.369 m48.026 328.369 l54.282 323.769 m51.154 323.769 l54.282 318.984 m51.154 318.984 l54.282 314.2 m51.154 314.2 l54.282 309.6 m48.026 309.6 l54.282 304.816 m51.154 304.816 lSn54.282 300.216 m51.154 300.216 l54.282 295.431 m51.154 295.431 l54.282 290.831 m48.026 290.831 l54.282 286.047 m51.154 286.047 l54.282 281.263 m51.154 281.263 l54.282 276.479 m51.154 276.479 l54.282 271.878 m48.026 271.878 l54.282 267.094 m51.154 267.094 l54.282 262.31 m51.154 262.31 l54.282 257.71 m51.154 257.71 l54.282 252.926 m48.026 252.926 l54.282 248.141 m51.154 248.141 l54.282 243.541 m51.154 243.541 l54.282 238.757 m51.154 238.757 l54.282 233.973 m48.026 233.973 l54.282 229.373 m51.154 229.373 lS49.8606 657.217 m(0.0) shown54.282 625.542 m54.282 632.35 lS103.959 657.217 m(1.6) shown108.381 625.542 m108.381 632.35 lS158.057 657.217 m(3.2) shown162.479 625.542 m162.479 632.35 lS212.156 657.217 m(4.8) shown216.577 625.542 m216.577 632.35 lS266.254 657.217 m(6.4) shown270.676 625.542 m270.676 632.35 lS320.352 657.217 m(8.0) shown324.774 625.542 m324.774 632.35 lS374.451 657.217 m(9.6) shown378.872 625.542 m378.872 632.35 lS428.365 664.073 m(11.2) shown432.787 625.542 m432.787 632.35 lS49.8606 191.541 m(0.25) shown54.282 206.004 m54.282 199.195 lS176.09 191.541 m(0.50) shown180.512 206.004 m180.512 199.195 lS302.32 191.541 m(0.75) shown306.741 206.004 m306.741 199.195 lS428.365 191.541 m(1.00) shown432.787 206.004 m432.787 199.195 l54.098 625.542 m54.098 206.188 l432.603 206.188 l432.603 625.542 l54.098 625.542 lS0.382996 wn402.426 602.357 m363.416 597.573 l301.037 592.788 l279.876 588.004 l245.099 583.404 l201.121 578.62 l173.52 574.02 l163.767 569.235 l138.374 564.451 l161.559 559.851 l206.825 555.067 l199.833 550.467 l196.337 545.682 l191.736 540.898 l174.992 536.298 l173.888 531.514 l165.423 526.729 l170.759 521.945 l157.511 517.345 l110.221 512.561 l110.037 507.961 l99.18 503.176 l125.309 498.392 l179.776 493.792 l194.864 489.008 l202.777 484.408 l184.376 479.623 l184.928 474.839 l190.08 470.055 l196.521 465.455 l209.217 460.671 l224.122 455.886 l210.321 451.286 l205.905 446.502 l225.41 441.902 l206.273 437.118 l237.002 432.333 l260.555 427.733 l227.986 422.949 l214.001 418.349 l181.8 413.565 l152.727 408.78 l150.335 403.996 l156.407 399.396 l156.407 394.612 l157.879 390.012 l158.799 385.227 l158.063 380.443 l147.942 375.843 l145.55 371.059 l139.662 366.459 l133.59 361.674 l149.046 356.89 l141.686 352.106 l148.678 347.506 l157.143 342.721 l142.79 337.937 l143.158 333.337 l146.838 328.553 l148.126 323.953 l150.519 319.168 l160.087 314.384 l152.911 309.784 l131.566 305 l127.702 300.4 l117.397 295.431 l104.517 290.831 l107.093 286.047 l106.909 281.447 l104.517 276.663 l109.853 272.062 l123.285 267.278 l131.75 262.494 l142.054 257.894 l163.031 253.11 l164.135 248.509 l170.023 243.725 l167.079 238.941 l167.263 234.157 l167.631 229.557 lS[3.45 3.45 ] 0 dn382.737 602.357 m382.737 597.573 l322.014 592.788 l322.014 578.62 l245.283 574.02 l245.283 559.851 l243.443 555.067 l243.443 540.898 l218.417 536.298 l218.417 521.945 l131.75 517.345 l131.75 503.176 l126.413 498.392 l126.413 484.408 l164.135 479.623 l164.135 465.455 l147.942 460.671 l147.942 446.502 l153.831 441.902 l153.831 427.733 l90.348 422.949 l90.348 408.78 l149.967 403.996 l149.967 390.012 l140.582 385.227 l140.582 371.059 l132.118 366.459 l132.118 352.106 l107.093 347.506 l107.093 333.337 l66.795 328.553 l66.795 314.384 l119.053 309.784 l119.053 295.431 l109.669 290.831 l109.669 276.663 l56.674 272.062 l56.674 257.894 l73.051 253.11 l73.051 238.941 lSPDFVars/TermAll get exec end endpseendpshowpage%%PageTrailer%%Trailerend%%EOF