%!PS-Adobe-3.0 EPSF-3.0%%Title: (Graph.02)%%Version: 1 2%%Creator: (MacRATS 5.01: LaserWriter 8 8.7.1)%%CreationDate: (D:20020609155404-04'00')%%For: (Christopher Carroll)%%DocumentData: Clean7Bit%%LanguageLevel: 2%%BoundingBox: 34 179 521 584%%Pages: 0%%DocumentProcessColors: Black%%DocumentSuppliedResources:%%+ procset (Adobe Acrobat - PDF operators) 1.2 0%%+ procset (Adobe Acrobat - type operators) 1.2 0%%EndComments34 179 moveto 521 179 lineto 521 584 lineto 34 584 lineto closepath clip newpath%%BeginProlog%%EndProlog%%BeginSetup%%BeginResource: l2check%%Copyright: Copyright 1993 Adobe Systems Incorporated. All Rights Reserved.systemdict /languagelevel known{ systemdict /languagelevel get 1 eq }{ true }ifelse{initgraphics /Helvetica findfont 18 scalefont setfont72 600 moveto (Error: Your printer driver needs to be configured) dup show72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup showexch = =/Helvetica-Bold findfont 16 scalefont setfont72 520 moveto (Windows and Unix) show/Times-Roman findfont 16 scalefont setfont72 500 moveto (Select \252Language Level 1\272 in the PostScript options section) show72 480 moveto (of the Acrobat print dialog.) show/Helvetica-Bold findfont 16 scalefont setfont72 440 moveto (Macintosh) show/Times-Roman findfont 16 scalefont setfont72 420 moveto (In the Chooser, select your printer driver.) show72 400 moveto (Then select your printer and click the Setup button.) show72 380 moveto (Follow any on-screen dialogs that may appear.) showshowpagequit}if%%EndResource/currentpacking where{pop currentpacking true setpacking}if%%BeginResource: procset pdfvars%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.%%Version: 5.0 6%%Title: definition of dictionary of variables used by PDF & PDFText procsetsuserdict /PDF 160 dict putuserdict /PDFVars 89 dict dup begin put/docSetupDone false def/InitAll 0 def/TermAll 0 def/DocInitAll 0 def/DocTermAll 0 def/_pdfEncodings 2 array def/_pdf_str1 1 string def/_pdf_i 0 def/_pdf_na 0 def/_pdf_showproc 0 def/_italMtx [1 0 .212557 1 0 0] def/_italMtx_WMode1 [1 -.212557 0 1 0 0] def/_italMtxType0 [1 0 .1062785 1 0 0] def/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def/_basefont 0 def/_basefonto 0 def/_pdf_oldCIDInit null def/_pdf_FontDirectory 30 dict def/_categories 10 dict def/_sa? true def/_ColorSep5044? false def/nulldict 0 dict def/_processColors 0 def/overprintstack null def/_defaulttransfer currenttransfer def/_defaultflatness currentflat def/_defaulthalftone null def/_defaultcolortransfer null def/_defaultblackgeneration null def/_defaultundercolorremoval null def/_defaultcolortransfer null defPDF begin[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W/applyInterpFunc/applystitchFunc/domainClip/encodeInput/initgs/int/limit/rangeClip/defineRes/findRes/setSA/pl%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver/? /! /| /: /+ /GetGlyphDirectory/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage/pdf_shfill /pdf_sethalftone] {null def} bind forallendend%%EndResourcePDFVars begin PDF begin%%BeginResource: procset pdfutil%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.%%Version: 4.0 2%%Title: Basic utilities used by other PDF procsets/bd {bind def} bind def/ld {load def} bd/bld {dup length dict begin{ null def } forallbindenddef} bd/dd { PDFVars 3 1 roll put } bd/xdd { exch dd } bd/Level2?systemdict /languagelevel known{ systemdict /languagelevel get 2 ge } { false } ifelsedef/Level1? Level2? not def/Level3?systemdict /languagelevel known{systemdict /languagelevel get 3 eq } { false } ifelsedef/getifknown {2 copy known { get true } { pop pop false } ifelse} bd/here {currentdict exch getifknown} bd/isdefined? { where { pop true } { false } ifelse } bd%%EndResource%%BeginResource: procset pdf%%Version: 5.0 7%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.%%Title: General operators for PDF, common to all Language Levels./cm { matrix astore concat } bd/d /setdash ld/f /fill ld/h /closepath ld/i {dup 0 eq {pop _defaultflatness} if setflat} bd/j /setlinejoin ld/J /setlinecap ld/M /setmiterlimit ld/n /newpath ld/S /stroke ld/w /setlinewidth ld/W /clip ld/initgs {0 setgray[] 0 d0 j0 J10 M1 wfalse setSA/_defaulttransfer load settransfer0 i/RelativeColorimetric rinewpath} bd/int {dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mulexch pop add exch pop} bd/limit {dup 2 index le { exch } if popdup 2 index ge { exch } if pop} bd/domainClip {Domain aload pop 3 2 rolllimit} [/Domain] bld/applyInterpFunc {0 1 DimOut 1 sub{dup C0 exch get exchdup C1 exch get exch3 1 roll1 index sub3 indexN exp mul addexchcurrentdict /Range_lo known{dup Range_lo exch get exchRange_hi exch get3 2 roll limit}{pop}ifelseexch} forpop} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld/encodeInput {NumParts 1 sub0 1 2 index{dup Bounds exch get2 index gt{ exit }{ dup3 index eq{ exit }{ pop } ifelse} ifelse} for3 2 roll popdup Bounds exch get exchdup 1 add Bounds exch get exch2 muldup Encode exch get exch1 add Encode exch getint} [/NumParts /Bounds /Encode] bld/rangeClip {exch dup Range_lo exch getexch Range_hi exch get3 2 rolllimit} [/Range_lo /Range_hi] bld/applyStitchFunc {Functions exch get execcurrentdict /Range_lo known {0 1 DimOut 1 sub {DimOut 1 add -1 rollrangeClip} for} if} [/Functions /Range_lo /DimOut] bld/pdf_flushfilters{aload length{ dup status1 index currentfile ne and{ dup flushfile closefile }{ pop }ifelse} repeat} bd/pdf_readstring{1 index dup length 1 sub getexch readstring popexch pdf_flushfilters} bind def/pdf_dictOp{3 2 roll10 dict copybegin_Filters dup length 1 sub get defcurrentdict exch exec_Filters pdf_flushfiltersend} [/_Filters] bld/pdf_image {{image} /DataSource pdf_dictOp} bd/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd/pdf_shfill {{sh} /DataSource pdf_dictOp} bd/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd/pdf_maskedImage{10 dict copy begin/miDict currentdict def/DataDict DataDict 10 dict copy defDataDict begin/DataSource_Filters dup length 1 sub getdefmiDict image_Filters pdf_flushfiltersendend} [/miDict /DataDict /_Filters] bld/RadialShade {40 dict begin/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch defgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 lt{c1x c1y r1 360 0 arcnxMin yMin movetoxMax yMin linetoxMax yMax linetoxMin yMax linetoxMin yMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 le{c2x c2y r2 360 0 arcnxMin yMin movetoxMax yMin linetoxMax yMax linetoxMin yMax linetoxMin yMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bd/GenStrips {40 dict begin/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch defgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bd%%EndResource%%BeginResource: procset pdflev2%%Version: 5.0 15%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.%%LanguageLevel: 2%%Title: PDF operators, with code specific for Level 2/docinitialize {PDF begin/_defaulthalftone currenthalftone dd/_defaultblackgeneration currentblackgeneration dd/_defaultundercolorremoval currentundercolorremoval dd/_defaultcolortransfer [currentcolortransfer] dd/_defaulttransfer currenttransfer ddendPDFVars /docSetupDone true put} bd/initialize {PDFVars /docSetupDone get {_defaulthalftone sethalftone/_defaultblackgeneration load setblackgeneration/_defaultundercolorremoval load setundercolorremoval_defaultcolortransfer aload pop setcolortransfer} iffalse setoverprint} bd/terminate { } bd/c /curveto ld/cs /setcolorspace ld/l /lineto ld/m /moveto ld/q /gsave ld/Q /grestore ld/sc /setcolor ld/setSA/setstrokeadjust ld/re {4 2 roll m1 index 0 rlineto0 exch rlinetoneg 0 rlinetoh} bd/concattransferfuncs {[ 3 1 roll /exec load exch /exec load ] cvx} bd/concatandsettransfer {/_defaulttransfer load concattransferfuncs settransfer} bd/concatandsetcolortransfer {_defaultcolortransfer aload pop8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll4 -1 roll 3 -1 roll concattransferfuncs 3 1 rollconcattransferfuncssetcolortransfer} bd/defineRes/defineresource ld/findRes/findresource ldcurrentglobaltrue systemdict /setglobal get exec[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]{ /Generic /Category findresource dup length dict copy /Category defineresource pop }forallsystemdict /setglobal get exec/ri{/findcolorrendering isdefined?{mark exchfindcolorrenderingcounttomark 2 eq{ type /booleantype eq{ dup type /nametype eq{ dup /ColorRendering resourcestatus{ pop popdup /DefaultColorRendering ne{/ColorRendering findresourcesetcolorrendering} if} if} if} if} ifcleartomark}{ pop} ifelse} bd/knownColorants? {pop false} bd/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forsetcolor} bd/sssetbackground { aload pop setcolor } bd%%EndResource%%BeginResource: procset pdftext%%Version: 5.0 6%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.%%Title: Text operators for PDFPDF /PDFText 78 dict dup begin put/docinitialize{/resourcestatus where {pop/CIDParams /ProcSet resourcestatus {pop popfalse /CIDParams /ProcSet findresource /SetBuildCompatible get exec} if} ifPDF beginPDFText /_pdfDefineIdentity-H known{ PDFText /_pdfDefineIdentity-H get exec}ifend} bd/initialize {PDFText begin} bd/terminate { end } bdLevel2?{/_safeput{3 -1 roll load 3 1 roll put}bd}{/_safeput{2 index load dup dup length exch maxlength ge{ dup length 5 add dict copy3 index xdd}{ pop }ifelse3 -1 roll load 3 1 roll put}bd}ifelse/pdf_has_composefont? systemdict /composefont known def/CopyFont {{1 index /FID ne 2 index /UniqueID ne and{ def } { pop pop } ifelse} forall} bd/Type0CopyFont{exchdup length dictbeginCopyFont[exchFDepVector{dup /FontType get 0 eq{1 index Type0CopyFont/_pdfType0 exch definefont}{/_pdfBaseFont exch2 index exec}ifelseexch}forallpop]/FDepVector exch defcurrentdictend} bdLevel2? {currentglobal true setglobal} if/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] defLevel2? {setglobal} if/modEnc {/_enc xdd/_icode 0 ddcounttomark 1 sub -1 0{indexdup type /nametype eq{_enc _icode 3 -1 roll put_icode 1 add}if/_icode xdd} forcleartomark_enc} bd/trEnc {/_enc xdd255 -1 0 {exch dup -1 eq{ pop /.notdef }{ Encoding exch get }ifelse_enc 3 1 roll put} forpop_enc} bd/TE {/_i xddStandardEncoding 256 array copy modEnc_pdfEncodings exch _i exch put} bd/TZ{/_usePDFEncoding xddfindfontdup length 6 add dictbegin{1 index /FID ne { def } { pop pop } ifelse} forall/pdf_origFontName FontName def/FontName exch defcurrentdict /PaintType known{ PaintType 2 eq {/PaintType 0 def} if }if_usePDFEncoding 0 ge{/Encoding _pdfEncodings _usePDFEncoding get defpop}{_usePDFEncoding -1 eq{counttomark 0 eq{ pop }{Encoding 256 array copymodEnc /Encoding exch def}ifelse}{256 arraytrEnc /Encoding exch def}ifelse}ifelsepdf_EuroProcSet pdf_origFontName known{pdf_origFontName pdf_AddEuroGlyphProc} ifLevel2?{currentdict /pdf_origFontName undef} ifFontName currentdictenddefinefont pop}bdLevel2?{/TZG{currentglobal true setglobal2 index _pdfFontStatus{2 index findfontfalse setglobal3 index findfonttrue setglobalne{2 index findfont dup rcheck{dup length dict begin{1 index /FID ne { def } { pop pop } ifelse} forallcurrentdict end}if3 index exch definefont pop}if} ifsetglobalTZ} bd}{/TZG {TZ} bd} ifelseLevel2?{currentglobal false setglobaluserdict /pdftext_data 5 dict putpdftext_databegin/saveStacks{pdftext_databegin/vmmode currentglobal deffalse setglobalcount array astore /os exch defendcountdictstack array dictstack pdftext_data exch /ds exch putcleardictstack pdftext_data /dscount countdictstack putpdftext_data /vmmode get setglobal} bind def/restoreStacks{pdftext_data /vmmode currentglobal put false setglobalclear cleardictstackpdftext_data /ds get duppdftext_data /dscount get 1 2 index length 1 sub{ get begin dup } forpop poppdftext_data /os get aload poppdftext_data /vmmode get setglobal} bind def/testForClonePrinterBug{currentglobal true setglobal/undefinedCategory /Generic /Category findresourcedup length dict copy /Category defineresource popsetglobalpdftext_data /saveStacks get execpdftext_data /vmmode currentglobal put false setglobal/undefined /undefinedCategory { resourcestatus } stoppedpdftext_data exch /bugFound exch putpdftext_data /vmmode get setglobalpdftext_data /restoreStacks get execpdftext_data /bugFound get} bind defendsetglobal/pdf_resourcestatuspdftext_data /testForClonePrinterBug get exec{{pdftext_data /saveStacks get execpdftext_data /os get dup dup length 1 subdup 1 sub dup 0 lt { pop 0 } ifexch 1 exch { get exch dup } forpop pop{ resourcestatus }stopped{clear cleardictstack pdftext_data /restoreStacks get exec{ pop pop } stopped pop false}{count array astore pdftext_data exch /results exch putpdftext_data /restoreStacks get exec pop poppdftext_data /results get aload pop}ifelse}}{ { resourcestatus } }ifelsebd}ifLevel2?{/_pdfUndefineResource{currentglobal 3 1 roll_pdf_FontDirectory 2 index 2 copy known{undef}{pop pop}ifelse1 index (pdf) exch _pdfConcatNames 1 index1 index 1 _pdfConcatNames 1 index5 index 1 _pdfConcatNames 1 index4{2 copy pdf_resourcestatus{pop 2 lt{2 copy findresource gcheck setglobal undefineresource}{pop pop}ifelse}{ pop pop}ifelse} repeatsetglobal} bd}{/_pdfUndefineResource { pop pop} bd}ifelseLevel2?{/_pdfFontStatus{currentglobal exch/Font pdf_resourcestatus{pop pop true}{false}ifelseexch setglobal} bd}{/_pdfFontStatusString 50 string def_pdfFontStatusString 0 (fonts/) putinterval/_pdfFontStatus{FontDirectory 1 index known{ pop true }{_pdfFontStatusString 6 42 getintervalcvs length 6 add_pdfFontStatusString exch 0 exch getinterval{ status } stopped{pop false}{{ pop pop pop pop true}{ false }ifelse}ifelse}ifelse} bd}ifelseLevel2?{/_pdfCIDFontStatus{/CIDFont /Category pdf_resourcestatus{pop pop/CIDFont pdf_resourcestatus{pop pop true}{false}ifelse}{ pop false }ifelse} bd}if/_pdfString100 100 string def/_pdfComposeFontName{dup length 1 eq{0 get1 indextype /nametype eq{_pdfString100 cvslength dup dup _pdfString100 exch (-) putinterval_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval2 index exch cvs lengthadd 1 add _pdfString100 exch 0 exch getintervalexch poptrue}{pop popfalse}ifelse}{false}ifelsedup {exch cvn exch} if} bd/_pdfConcatNames{exch_pdfString100 cvslength dup dup _pdfString100 exch (-) putinterval_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval3 -1 roll exch cvs lengthadd 1 add _pdfString100 exch 0 exch getintervalcvn} bind def/_pdfTextTempString 50 string def/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def/_pdf_CheckCIDSystemInfo{1 index _pdfTextTempString cvs(Identity) anchorsearch{pop pop pop pop true}{false_pdfRegOrderingArray{2 index exchanchorsearch{ pop pop pop true exit}{ pop }ifelse}forallexch popexch /CIDFont findresource/CIDSystemInfo get3 -1 roll /CMap findresource/CIDSystemInfo getexch3 -1 roll{2 copy/Supplement getexchdup type /dicttype eq{/Supplement get}{pop 0 }ifelsege}{ true }ifelse{dup /Registry get2 index /Registry get eq{/Ordering getexch /Ordering getdup type /arraytype eq{1 index type /arraytype eq{true1 index length 1 sub -1 0{dup 2 index exch get exch 3 index exch get ne{ pop false exit}if} forexch pop exch pop}{ pop pop false }ifelse}{eq}ifelse}{ pop pop false }ifelse}{ pop pop false }ifelse}ifelse} bind defpdf_has_composefont?{/_pdfComposeFont{2 copy _pdfComposeFontName not{2 index}if(pdf) exch _pdfConcatNamesdup _pdfFontStatus{ dup findfont 5 2 roll pop pop pop true}{4 1 roll1 index /CMap pdf_resourcestatus{pop poptrue}{false}ifelse1 index true exch{_pdfCIDFontStatus not{pop false exit}if}foralland{1 index 1 index 0 get _pdf_CheckCIDSystemInfo{3 -1 roll pop2 index 3 1 rollcomposefont true}{pop pop exch pop false}ifelse}{_pdfComposeFontName{dup _pdfFontStatus{exch pop1 index exchfindfont definefont true}{pop exch popfalse}ifelse}{exch popfalse}ifelse}ifelse{ true }{dup _pdfFontStatus{ dup findfont true }{ pop false }ifelse}ifelse}ifelse} bd}{/_pdfComposeFont{_pdfComposeFontName not{dup}ifdup_pdfFontStatus{exch pop dup findfont true}{1 indexdup type /nametype eq{pop}{cvn}ifelseeq{pop false}{dup _pdfFontStatus{dup findfont true}{pop false}ifelse}ifelse}ifelse} bd}ifelse/_pdfStyleDicts 4 dict dup begin/Adobe-Japan1 4 dict dup beginLevel2?{/Serif/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus{/HeiseiMin-W3}{/HeiseiMin-W3 _pdfCIDFontStatus{/HeiseiMin-W3}{/Ryumin-Light}ifelse}ifelsedef/SansSerif/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus{/HeiseiKakuGo-W5}{/HeiseiKakuGo-W5 _pdfCIDFontStatus{/HeiseiKakuGo-W5}{/GothicBBB-Medium}ifelse}ifelsedef/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus{/HeiseiMaruGo-W4}{/HeiseiMaruGo-W4 _pdfCIDFontStatus{/HeiseiMaruGo-W4}{/Jun101-Light-RKSJ-H _pdfFontStatus{ /Jun101-Light }{ SansSerif }ifelse}ifelse}ifelse/RoundSansSerif exch def/Default Serif def}{/Serif /Ryumin-Light def/SansSerif /GothicBBB-Medium def{(fonts/Jun101-Light-83pv-RKSJ-H) status}stopped{pop}{{ pop pop pop pop /Jun101-Light }{ SansSerif }ifelse/RoundSansSerif exch def}ifelse/Default Serif def}ifelseenddef/Adobe-Korea1 4 dict dup begin/Serif /HYSMyeongJo-Medium def/SansSerif /HYGoThic-Medium def/RoundSansSerif SansSerif def/Default Serif defenddef/Adobe-GB1 4 dict dup begin/Serif /STSong-Light def/SansSerif /STHeiti-Regular def/RoundSansSerif SansSerif def/Default Serif defenddef/Adobe-CNS1 4 dict dup begin/Serif /MKai-Medium def/SansSerif /MHei-Medium def/RoundSansSerif SansSerif def/Default Serif defenddefenddef/TZzero{/_wmode xdd/_styleArr xdd/_regOrdering xdd3 copy_pdfComposeFont{5 2 roll pop pop pop}{[0 1 _styleArr length 1 sub{_styleArr exch get_pdfStyleDicts _regOrdering 2 copy known{getexch 2 copy known not{ pop /Default }ifget}{pop pop pop /Unknown}ifelse}for]exch pop2 index 3 1 roll_pdfComposeFont{3 -1 roll pop}{findfont dup /FontName get exch}ifelse}ifelsedup /WMode 2 copy known{ get _wmode ne }{ pop pop _wmode 1 eq}ifelse{exch _wmode _pdfConcatNamesdup _pdfFontStatus{ exch pop dup findfont false}{ exch true }ifelse}{dup /FontType get 0 ne}ifelse{dup /FontType get 3 eq _wmode 1 eq and{_pdfVerticalRomanT3Font dup length 10 add dict copybegin/_basefont exchdup length 3 add dictbegin{1 index /FID ne {def}{pop pop} ifelse }forall/Encoding Encoding dup length array copydup 16#27 /quotesingle putdup 16#60 /grave put_regOrdering /Adobe-Japan1 eq{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}ifdefFontNamecurrentdictenddefinefontdef/Encoding _basefont /Encoding get def/_fauxfont true def}{dup length 3 add dictbegin{1 index /FID ne {def}{pop pop} ifelse }forallFontType 0 ne{/Encoding Encoding dup length array copydup 16#27 /quotesingle putdup 16#60 /grave put_regOrdering /Adobe-Japan1 eq{dup 16#5c /yen put}ifdef/_fauxfont true def} if} ifelse/WMode _wmode defdup dup /FontName exch defcurrentdictenddefinefont pop}{pop}ifelse/_pdf_FontDirectory 3 1 roll _safeput}bdLevel2?{/Tf {_pdf_FontDirectory 2 index 2 copy known{get exch 3 -1 roll pop}{pop pop}ifelseselectfont} bd}{/Tf {_pdf_FontDirectory 2 index 2 copy known{get exch 3 -1 roll pop}{pop pop}ifelseexch findfont exchdup type /arraytype eq{makefont}{scalefont}ifelsesetfont} bd}ifelse/cshow where{pop /pdf_cshow /cshow load dd/pdf_remove2 {pop pop} dd}{/pdf_cshow {exch forall} dd/pdf_remove2 {} dd} ifelse/pdf_xshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{_pdf_x _pdf_y moveto0rmoveto}ifelse_pdf_i 1 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdf_yshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{_pdf_x _pdf_y moveto0 exchrmoveto}ifelse_pdf_i 1 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdf_xyshow{/_pdf_na xdd/_pdf_i 0 ddcurrentpoint/_pdf_y xdd/_pdf_x xdd{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 /_pdf_showproc load exec{_pdf_na _pdf_i get} stopped{ pop pop }{{_pdf_na _pdf_i 1 add get} stopped{ pop pop pop}{_pdf_x _pdf_y movetormoveto}ifelse}ifelse_pdf_i 2 add /_pdf_i xddcurrentpoint/_pdf_y xdd/_pdf_x xdd}exchpdf_cshow} bd/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bdLevel2? _ColorSep5044? not and{/pdfxs {{xshow} stopped {pdfl1xs} if} bd/pdfys {{yshow} stopped {pdfl1ys} if} bd/pdfxys {{xyshow} stopped {pdfl1xys} if} bd}{/pdfxs /pdfl1xs load dd/pdfys /pdfl1ys load dd/pdfxys /pdfl1xys load dd} ifelse/pdf_charpath {false charpath} bd/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd/pdf_strokepath{{pdf_remove2_pdf_str1 exch 0 exch put_pdf_str1 false charpathcurrentpoint S moveto} bindexch pdf_cshow} bd/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bdLevel2? {currentglobal true setglobal} if/d0/setcharwidth ld/nND {{/.notdef} repeat} bd/T3Defs {/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec}def/BuildGlyph {exch beginGlyphProcs exch get execend} def/_pdfT3Font true def} bd/_pdfBoldRomanWidthProc{stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth0 0} bd/_pdfType0WidthProc{dup stringwidth 0 0 moveto2 index true charpath pathbbox0 -17 index 2 div .88setcachedevice2pop0 0} bd/_pdfType0WMode1WidthProc{dup stringwidthpop 2 div neg -0.882 copymoveto0 -15 -1 roll true charpath pathbboxsetcachedevice} bd/_pdfBoldBaseFont11 dict begin/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding cHexEncoding def/_setwidthProc /_pdfBoldRomanWidthProc load def/_bcstr1 1 string def/BuildChar{exch begin_basefont setfont_bcstr1 dup 0 4 -1 roll putdup_setwidthProc3 copymovetoshow_basefonto setfontmovetoshowend}bdcurrentdictenddefpdf_has_composefont?{/_pdfBoldBaseCIDFont11 dict begin/CIDFontType 1 def/CIDFontName /_pdfBoldBaseCIDFont def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/_setwidthProc /_pdfType0WidthProc load def/_bcstr2 2 string def/BuildGlyph{exch begin_basefont setfont_bcstr2 1 2 index 256 mod put_bcstr2 0 3 -1 roll 256 idiv put_bcstr2 dup _setwidthProc3 copymovetoshow_basefonto setfontmovetoshowend}bdcurrentdictenddef/_pdfDefineIdentity-H{/Identity-H /CMap PDFText /pdf_resourcestatus get exec{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo3 dict begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defcurrentdictenddef/CMapName /Identity-H def/CMapVersion 1 def/CMapType 1 def1 begincodespacerange<0000> <ffff>endcodespacerange1 begincidrange<0000> <ffff> 0endcidrangeendcmapCMapName currentdict/CMap defineresource popendend} ifelse} def} if/_pdfVerticalRomanT3Font10 dict begin/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/_bcstr1 1 string def/BuildChar{exch begin_basefont setfont_bcstr1 dup 0 4 -1 roll putdup_pdfType0WidthProcmovetoshowend}bdcurrentdictenddefLevel2? {setglobal} if/MakeBoldFont{dup /ct_SyntheticBold known{dup length 3 add dict beginCopyFont/ct_StrokeWidth .03 0 FontMatrix idtransform pop def/ct_SyntheticBold true defcurrentdictenddefinefont}{dup dup length 3 add dictbeginCopyFont/PaintType 2 def/StrokeWidth .03 0 FontMatrix idtransform pop def/dummybold currentdictenddefinefontdup /FontType get dup 9 ge exch 11 le and{_pdfBoldBaseCIDFontdup length 3 add dict copy begindup /CIDSystemInfo get /CIDSystemInfo exch def/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont/_basefont exch def/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont/_basefonto exch defcurrentdictend/CIDFont defineresource}{_pdfBoldBaseFontdup length 3 add dict copy begin/_basefont exch def/_basefonto exch defcurrentdictenddefinefont}ifelse}ifelse} bd/MakeBold {1 index_pdf_FontDirectory 2 index 2 copy known{get}{exch pop}ifelsefindfontdup/FontType get 0 eq{dup /WMode known {dup /WMode get 1 eq }{false} ifelseversion length 4 geand{version 0 4 getinterval cvi 2015 ge }{true}ifelse{/_pdfType0WidthProc}{/_pdfType0WMode1WidthProc}ifelse_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put{MakeBoldFont} Type0CopyFont definefont}{dup /_fauxfont known not 1 index /SubstMaster known not and{_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load putMakeBoldFont}{2 index 2 index eq{ exch pop }{dup length dict beginCopyFontcurrentdictenddefinefont}ifelse}ifelse}ifelsepop popdup /dummybold ne{/_pdf_FontDirectory exch dup _safeput }{ pop }ifelse}bd/MakeItalic {_pdf_FontDirectory exch 2 copy known{get}{exch pop}ifelsedup findfontdup /FontInfo 2 copy known{get/ItalicAngle 2 copy known{get 0 eq }{ pop pop true}ifelse}{ pop pop true}ifelse{exch popdup /FontType get 0 eq Level2? not and{ dup /FMapType get 6 eq }{ false }ifelse{dup /WMode 2 copy known{get 1 eq{ _italMtx_WMode1Type0 }{ _italMtxType0 }ifelse}{ pop pop _italMtxType0 }ifelse}{dup /WMode 2 copy known{get 1 eq{ _italMtx_WMode1 }{ _italMtx }ifelse}{ pop pop _italMtx }ifelse}ifelsemakefontdup /FontType get 42 eq Level2? not or{dup length dict beginCopyFontcurrentdictend}if1 index exchdefinefont pop/_pdf_FontDirectory exch dup _safeput}{pop2 copy ne{/_pdf_FontDirectory 3 1 roll _safeput}{ pop pop }ifelse}ifelse}bd/MakeBoldItalic {/dummybold exchMakeBold/dummyboldMakeItalic}bdLevel2?{/pdf_CopyDict{1 index length add dict copy}def}{/pdf_CopyDict{1 index length add dict1 index wcheck{ copy }{ begin{def} forallcurrentdictend}ifelse}def}ifelse/pdf_AddEuroGlyphProc{currentdict /CharStrings known{CharStrings /Euro known not{dup/CharStringsCharStrings 1 pdf_CopyDictbegin/Euro pdf_EuroProcSet 4 -1 roll get defcurrentdictenddef/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def/pdf_PathOps /pdf_PathOps load def/Symbol eq{/Encoding Encoding dup length array copydup 160 /Euro put def}if}{ pop}ifelse}{ pop}ifelse}defLevel2? {currentglobal true setglobal} if/pdf_PathOps 4 dict dup begin/m {moveto} def/l {lineto} def/c {curveto} def/cp {closepath} defenddef/pdf_PSBuildGlyph{gsave8 -1 roll pop7 1 rollcurrentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelsedup 9 1 roll{currentdict /StrokeWidth 2 copy known{get 2 div5 1 roll4 -1 roll 4 index sub4 1 roll3 -1 roll 4 index sub3 1 rollexch 4 index add exch4 index add5 -1 roll pop}{pop pop}ifelse}ifsetcachedevicepdf_PathOps beginexecend{currentdict /StrokeWidth 2 copy known{ get }{ pop pop 0 }ifelsesetlinewidth stroke}{fill}ifelsegrestore} def/pdf_EuroProcSet 13 dict defpdf_EuroProcSetbegin/Courier-Bold{600 0 6 -12 585 612{385 274 m180 274 l179 283 179 293 179 303 c179 310 179 316 180 323 c398 323 l423 404 l197 404 l219 477 273 520 357 520 c409 520 466 490 487 454 c487 389 l579 389 l579 612 l487 612 l487 560 l449 595 394 612 349 612 c222 612 130 529 98 404 c31 404 l6 323 l86 323 l86 304 l86 294 86 284 87 274 c31 274 l6 193 l99 193 l129 77 211 -12 359 -12 c398 -12 509 8 585 77 c529 145 l497 123 436 80 356 80 c285 80 227 122 198 193 c360 193 lcp600 0 m}pdf_PSBuildGlyph} def/Courier-BoldOblique /Courier-Bold load def/Courier{600 0 17 -12 578 584{17 204 m97 204 l126 81 214 -12 361 -12 c440 -12 517 17 578 62 c554 109 l501 70 434 43 366 43 c266 43 184 101 154 204 c380 204 l400 259 l144 259 l144 270 143 281 143 292 c143 299 143 307 144 314 c418 314 l438 369 l153 369 l177 464 249 529 345 529 c415 529 484 503 522 463 c522 391 l576 391 l576 584 l522 584 l522 531 l473 566 420 584 348 584 c216 584 122 490 95 369 c37 369 l17 314 l87 314 l87 297 l87 284 88 272 89 259 c37 259 lcp600 0 m}pdf_PSBuildGlyph} def/Courier-Oblique /Courier load def/Helvetica{556 0 24 -19 541 703{541 628 m510 669 442 703 354 703 c201 703 117 607 101 444 c50 444 l25 372 l97 372 l97 301 l49 301 l24 229 l103 229 l124 67 209 -19 350 -19 c435 -19 501 25 509 32 c509 131 l492 105 417 60 343 60 c267 60 204 127 197 229 c406 229 l430 301 l191 301 l191 372 l455 372 l479 444 l194 444 l201 531 245 624 348 624 c433 624 484 583 509 534 ccp556 0 m}pdf_PSBuildGlyph} def/Helvetica-Oblique /Helvetica load def/Helvetica-Bold{556 0 12 -19 563 710{563 621 m537 659 463 710 363 710 c216 710 125 620 101 462 c51 462 l12 367 l92 367 l92 346 l92 337 93 328 93 319 c52 319 l12 224 l102 224 l131 58 228 -19 363 -19 c417 -19 471 -12 517 18 c517 146 l481 115 426 93 363 93 c283 93 254 166 246 224 c398 224 l438 319 l236 319 l236 367 l457 367 l497 462 l244 462 l259 552 298 598 363 598 c425 598 464 570 486 547 c507 526 513 517 517 509 ccp556 0 m}pdf_PSBuildGlyph} def/Helvetica-BoldOblique /Helvetica-Bold load def/Symbol{750 0 20 -12 714 685{714 581 m650 645 560 685 465 685 c304 685 165 580 128 432 c50 432 l20 369 l116 369 l115 356 115 347 115 337 c115 328 115 319 116 306 c50 306 l20 243 l128 243 l165 97 300 -12 465 -12 c560 -12 635 25 685 65 c685 155 l633 91 551 51 465 51 c340 51 238 131 199 243 c555 243 l585 306 l184 306 l183 317 182 326 182 336 c182 346 183 356 184 369 c614 369 l 644 432 l199 432 l233 540 340 622 465 622 c555 622 636 580 685 520 ccp750 0 m}pdf_PSBuildGlyph} def/Times-Bold{500 0 16 -14 478 700{367 308 m224 308 l224 368 l375 368 l380 414 l225 414 l230 589 257 653 315 653 c402 653 431 521 444 457 c473 457 l473 698 l444 697 l441 679 437 662 418 662 c393 662 365 700 310 700 c211 700 97 597 73 414 c21 414 l16 368 l69 368 l69 359 68 350 68 341 c68 330 68 319 69 308 c21 308 l16 262 l73 262 l91 119 161 -14 301 -14 c380 -14 443 50 478 116 c448 136 l415 84 382 40 323 40 c262 40 231 77 225 262 c362 262 lcp500 0 m}pdf_PSBuildGlyph} def/Times-BoldItalic{500 0 9 -20 542 686{542 686 m518 686 l513 673 507 660 495 660 c475 660 457 683 384 683 c285 683 170 584 122 430 c58 430 l34 369 l105 369 l101 354 92 328 90 312 c34 312 l9 251 l86 251 l85 238 84 223 84 207 c84 112 117 -14 272 -14 c326 -14 349 9 381 9 c393 9 393 -10 394 -20 c420 -20 l461 148 l429 148 l416 109 362 15 292 15 c227 15 197 55 197 128 c197 162 204 203 216 251 c378 251 l402 312 l227 312 l229 325 236 356 241 369 c425 369 l450 430 l255 430 l257 435 264 458 274 488 c298 561 337 654 394 654 c437 654 484 621 484 530 c484 516 l516 516 lcp500 0 m}pdf_PSBuildGlyph} def/Times-Italic{500 0 23 -10 595 692{399 317 m196 317 l199 340 203 363 209 386 c429 386 l444 424 l219 424 l246 514 307 648 418 648 c448 648 471 638 492 616 c529 576 524 529 527 479 c549 475 l595 687 l570 687 l562 674 558 664 542 664 c518 664 474 692 423 692 c275 692 162 551 116 424 c67 424 l53 386 l104 386 l98 363 93 340 90 317 c37 317 l23 279 l86 279 l85 266 85 253 85 240 c85 118 137 -10 277 -10 c370 -10 436 58 488 128 c466 149 l424 101 375 48 307 48 c212 48 190 160 190 234 c190 249 191 264 192 279 c384 279 lcp500 0 m}pdf_PSBuildGlyph} def/Times-Roman{500 0 10 -12 484 692{347 298 m171 298 l170 310 170 322 170 335 c170 362 l362 362 l374 403 l172 403 l184 580 244 642 308 642 c380 642 434 574 457 457 c481 462 l474 691 l449 691 l433 670 429 657 410 657 c394 657 360 692 299 692 c204 692 94 604 73 403 c22 403 l10 362 l70 362 l69 352 69 341 69 330 c69 319 69 308 70 298 c22 298 l10 257 l73 257 l97 57 216 -12 295 -12 c364 -12 427 25 484 123 c458 142 l425 101 384 37 316 37 c256 37 189 84 173 257 c335 257 lcp500 0 m}pdf_PSBuildGlyph} defendLevel2? {setglobal} ifcurrentdict readonly pop end%%EndResourcePDFText begin[userdict /pdf_svglb currentglobal put true setglobal39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron0 TE[1/dotlessi/caron 39/quotesingle 96/grave 127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark/scaron/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis1 TEenduserdict /pdf_svglb get setglobalcurrentdict readonly popend end/currentpacking where {pop setpacking}ifPDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF beginPDFVars/DocInitAll get exec PDFVars/InitAll get execPDFVars/TermAll get exec end end PDF /docinitialize get exec
%%EndSetupPDFVars begin PDF begin PDFVars/InitAll get exec34 179 488 405 rectclip[ 0 1 -1 0 700.31374 145.30142 ] concat/N29 <~J,k+MJH:=QJc^OUK*-aYKEQs]Ka!0aL'EBeLBiTiL^8fmM$]#qM@,5uM[PH$N!tZ(
N=Cl,NXh)0Nt7;4O:[M8OV*_<OqNq@P7s.DPSB@HPnfRLQ55dPQPZ!TQl)3XR2ME\
RMqW`Ri@idS/e&hSK48lSfXJpT-'\tTHKo#Tcp,'U*?>+UEcP/Ua2b3V'Vt7VC&1;
V^JC?W$nUCW@=gGW[b$KX"16OX=UHSXY$ZWXtHl[Y:m)_YV<;cYq`MgZ8/_kZSSqo
Zo#.s[5GA"[PkS&[l:e*\2_".\N.42\iRF6]0!X:]KEj>]fj'B^-99F^H]KJ^d,]N
_*PoR_Eu,V_aD>Z`'hP^`C7bb`^[tfa%+1ja@OCna[sUrb"Bh!b=g%%bY67)btZI-
c;)[1cVMm5cqr*9d8A<=dSeNAdo4`Ee5XrIeQ(/MelLAQf2pSUfN?eYfid"]g034a
gKWFegg&Xih-JjmhHo'qhd>9ui*bL$iF1^(iaUp,j(%-0jCI?4j^mQ8k%<c<k@`u@
k\02Dl"TDHl>#VLlYGhPltl%Tm;;7XmV_I\mr.[`n8RmdnT"*hnoF<lo5jNpoQ9`t
ol]s#p3-0'pNQB+piuT/q0Df3qKi#7qg85;r-\G?rI+YCrdOkGs*t(K~> 15 dict begin/Sample exch defcurrentdict end[exch {begin/_x0 exch def/_tmp0 _x0dup 1 ge {pop 255}{dup 0 le {pop 0}{255 mul } ifelse} ifelsedef/min0 _tmp0 cvi def/max0 _tmp0 ceiling cvi def/f0min0 max0 eq{{min0 f1}}{{[min0 f1 max0 f10 1 0 {dup 3 index exch get exch 2 index exch get_tmp0 min0 max0 5 3 roll int3 1 roll} for pop pop]}} ifelsedef/f1{/prm0 exch def [ 0 255 prm0 limit 16 mul -3 bitshift /byte-offset exch def0 0 1 1 {byte-offset add Sample exch get exch 8 bitshift or} for]} def/rnd {65536 mul 0.5 add floor 65536 div} deff0 aload popdup 65535 ge {pop 1}{dup 0 le {pop -1}{2 65535 div mul 1 sub } ifelse} ifelse-1 1 3 2 roll limit rndend} bind aload pop] cvx readonly/Function defineRes pop/N28 <~!!*-'"9eu7#RLhG$k3[W&.oNg'GVB"(`=52*$$(B+<_pR,UFcb-n-Vr/1iJ-0JP==
1c70M3&s#]4?Ykm5X@_(6q'R884cEH9MJ8X:f1+h<)lt#=BSg3>[:ZC?t!MSA7]@c
BPD3sCi+'.E,fo>FEMbNG^4U^I!pHnJ:W<)KS>/9Ll%"IN/`jYOHG]iPa.Q$R$jD4
S=Q7DTV8*TUnsrdW2ZetXKAY/Yd(L?['d?O\@K2_]Y2%o^qmn*`5Ta:aN;TJbg"GZ
d*^:jeCE.%f\,!5gtgiEi8N\UjQ5OekiqBum-X60nF?)@o_%qPq"ad`r;HWp~> 15 dict begin/Sample exch defcurrentdict end[exch {begin/_x0 exch def/_tmp0 _x0dup 1 ge {pop 255}{dup 0 le {pop 0}{255 mul } ifelse} ifelsedef/min0 _tmp0 cvi def/max0 _tmp0 ceiling cvi def/f0min0 max0 eq{{min0 f1}}{{[min0 f1 max0 f10 1 0 {dup 3 index exch get exch 2 index exch get_tmp0 min0 max0 5 3 roll int3 1 roll} for pop pop]}} ifelsedef/f1{/prm0 exch def [ 0 255 prm0 limit 8 mul -3 bitshift Sample exch get ]} def/rnd {256 mul 0.5 add floor 256 div} deff0 aload popdup 255 ge {pop 1}{dup 0 le {pop 0}{255 div } ifelse} ifelse0 1 3 2 roll limit rndend} bind aload pop] cvx readonly/Function defineRes pop%%BeginResource: font AGPADB+Helvetica11 dict begin/FontName /AGPADB+Helvetica def/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def/PaintType 0 def/FontType 1 def/FontBBox { 0 0 0 0 } def/FontInfo 1 dict dup begin  /OrigFontType /TrueType defend readonly defcurrentdictendsystemdict begindup /Private 7 dict dup begin/BlueValues [-15 0 600 650] def/MinFeature {16 16} def/password 5839 def/ND {def} def/NP {put} def/RD {string currentfile exch readhexstring pop} def2 index /CharStrings 392 dict dup begin/.notdef <10bf31702819c97bedad77c520997248fd01f1fdf56b6d3a7b315c442edce5c5add3ad947c7a59668a37> ND /g3 <10bf317079c7734bf7> ND /g15 <10bf31702cee7013f245a9f583f253dbe6c2de96ae365e163348ff4b5c4c60b7acaa37cf417362ca19233e3504acb1a83a7e2aec458a0541313d0c7e479b9b101d> ND /g17 <10bf317012d5a80a32a09ad1c0fbc0d2d8539977> ND /g19 <10bf3170586c505b39782e17b31ef48a42c2af6a1bc37b7f4289e518ae9b1577535f6c4448c21ef3c5aee4f7bfd80eefefb377aac62b391e5c809ed8f58bcb3f9349847c8fafe27669bb2189b250953e6f1916b823c8e8d2ac539fc0c1d74a782cdad0f0bcde973b0d9d7a5f36f803d08b0df8798aa9ac3d57353f365a926f6929a3fbe079> ND /g20 <10bf3170193f87966b6872b9490c887b4c98197be9b70f7eddfd9bd751bce19da3aa4aee533e6938e82c0222> ND /g21 <10bf3170586c505b45be7eaf007486818257ec078648d06c90283eb6aeaaf966c739447b78065fd09b3440996da21a2d13a6ab7f2f0ae525438d5fa7596f5e9a2fb4196f98db4aa1b0b4b072e77a1376e2b94d3e556111a6cfbd3d359c82a55a54f3a6ef999b7bb69caad46a2bda7f55d927b15f31059224eb77090ea55ce21f9aab98f185a4c936a1b0f3a0> ND /g23 <10bf3170560f9ea7ca74ef14747e6903f543dbfdca4bb14a7af658cb7a37790f8ba02fc0d9fdd09cd756aafa8a7e70a497e43b464c2f96895e3ca823> ND /g24 <10bf3170599a82aebc63bbc0ae599e3b29fcedb68cf364582735cfed7252e91ae4bf39a8708dc140ff6bcd20ff2402e042b55e6512ada1d50b95dcbc8ebfe23e006bf897b10d6f9ae779b3e0fbae1b09b3463f951592626046821ac6065f7cbc4b3f52c27c253bda72fed0c1ba4232ad396f687005b94869998db0d782aea1ce7877123a462ff39826650e87facef0302b56> ND /g25 <10bf3170435d0d442ad24cbb267522076c23a4be05305457a9e1e86bad96b4552cc397b4de81153a14ab23b122ad37e7866d1518ff7579b8fc63dcbb9f10c07e5a8b48acef690e7a0b9199a5dd977343df5a5d1ed0c9ed8c8f576893b602958b24c04bcb2f96593358959414f94766499057875e3432c8b17b226beb44c1f68b38a163028d0e7733b20319ba85b29cccb2fffcf23b29d97ba8a57f2e756927ae4a56ad39f9250d36de2f9c1f452e0f289248f3f2b6120ade135c653249ff031a88> ND /g26 <10bf3170422fdb647df3e00b9ce0683434a5722cb9daa01db9198fbd2c04dc849fcc63abdd3119bbd11f45e66b0576ec21f410dff67d407c5a1c2f5a3c209c1f5202c0228e36> ND /g27 <10bf3170599a82aebca14676484a82a3842f08adaf38df1ed46d9a26a0a2d2c09b1ff1020727e9dd4b5a3ff0f73a47c0a60f3f3264dc34e6fda48a9f22912370499260b31e5c586278764e95ffd1bffbffc0d477c2ce2e609626ac89abfec7616b537ad33569d208cc6ac39a96fabeffeddda84b42027f729b1b6d7a2aaf97d441540a57aa19dc1dd112fe0391df1e08a75d8c127d6c52fc26a7e8790654d0e9e656570c6b681ef8a8d9f0f6a6e247639332e4637d100c68aae7d51e5aa1d9f5a35466f62789350601b6fffa8a5eff9321ab6bf1335fac1c65325fb58f7b0fa5af1282ed59bcaba5ddb811800d5f508fb85f7243d4775a4d415f> ND /g28 <10bf31705d64e193922eacfa3d0220239affb130ce1750addf4bcb4e0bc731b868129f2a1be8ef9e325d9964d420cdac6a8f7c924d8c572ddb929c98f35d4246ded1cc98ab9806fbd2cb094085ae29f6214d4fd8d045244ac6e81c53661e0ad18c56a4cb84481d7fb2ff251c9271437febc2e9d4dbb151db40b9e11ab6175f2b375df4dec2c5b211ba61cc0843897759e711ec01bb08a42e00ef792d5384f6a26afd808061a749db14cdc08ed4736c5d31a2c5f387d2d181380008afce05ca> ND /g32 <10bf3170422fc7458d08c2357f51e9b246ef31fcc8a969a2c7643c34c39e59f001bc773d35> ND /g39 <10bf31702e4fbf69bf53343b227594afceab166c7fca97dcae7757a793e3debe136366e0ef920879acbe3744484ca306affcbe8b5c2d2b2ca4d26d043d22f8cfe37133534fe3afe7d1d22ab4023842800ce88c9a7ed4472c9d45e16a1ab4dc33baa4399ad16e9f1aa8b5c4> ND /g40 <10bf317012dbf686a5a3fc34465a5771113b1ce4d8686255b4674807dc754925dee601f6d1df3a3906d7e4d1f5> ND /g47 <10bf3170258c5b67ef851136ac2a2286dfcac25a8f4a3888a4459dd5> ND /g48 <10bf317027e82ad3304630af9f3c74db7ef2eb579716124d9b2bffab8ee5c1b14fa5b3daf33dc791e5ebd57b314e8099e2ee806744cdd6b8b70ff0d79f262c4b6a7cd0c8380de1f8db700e814555bac896ce21a08a5d> ND /g68 <10bf317041f0e1611a73fa21fc27e867dcbc270cea30f7fa5e5d482f3a4854bee0d7b991de02dcbe8689b3ea16b4af608f9e8cc5750180e79b341cd7bb6154e7d3124fa812a8a9016b9d4532f18ab21f8a8c1022f50ca3937677e4f44e7b6d5c8638d24bfc0a86c76ba98e31f47953a68e581b753c7cf64c86198bb293c320f36e203ef47c195cf2025811af258613fb633cbbecc1aa6adbdf32a9164d0b9123e76600c7a8cd4ecfb4455f39aed51122aa758fcf2dc3d742015a54c4619ab47090d5f3d1503717e04c44f32c9a56cc8813161b5dc68cd094297bb30d26f0f4a0031e4b885f11ca09180be59c434cd294276d8bb37aafb1ae1130f5736284adbe95b51d> ND /g69 <10bf3170370053c73f57fff05e73cff01e45c0c88b598c0cdeaecb75fb6895008e5d74cc37a45a0352f31318d90486b891f1cbfc59763688b51811b11f7bb6876c38b61f5e54d4c8cf151d03afc3171ccdbf265ddd1a43ef2a078409a0d610284e7191b6d363f7525494307df7e7b6ac9be1333937018a9b466a56406d1d0c8da8d569e043d990da3c4c4a9562> ND /g70 <10bf31705ac94bed672d56f0ba7147a01338652a66efe6a2abf028cabaa14ec857bae323edbd72ab7d2bb45bf3cae288ecbed2327a531d333d543ddc542d65e8ebffdbd1ec12f43be7ada0ac484cfc27646b7b0ce4f212bf7012b843b4fb631d619858646bcfa7a8c1753d9ce3640bae633a5cbc1ebff0a3de490d02eec3c29449a1ae> ND /g71 <10bf317054a2726d4d446fc94ea242db71b1df10a88d9cc45958d7f44c28e46a2dba8ff569e03ab7a60f71b0b8ae1059bda86461ee48a29eb1f06eb0393b6992e394f0c3ad6a6389fcb9977f955ad7ea473e60136a0b123c88d807489e7beb2c32b06e1b9ff6a1bf4616268cdd24ee713332a8d2582d2994cea75f86331ea4b6960a7e522788e5139929289e81eeeb80> ND /g72 <10bf31705c36af5ce09326e9cf2ba9fb709b6eb04a9673bf2aec3563f37a87eb78c93ad7c87d159999fdb5e649bde74d9475967b76de65630bbbd1e6c88d7232a4476ac67b5f8ab3775d8009b89ec8b26598aa42444f1ccc633fc796f02b62185769fa5ef801e40c97db420a588468e53a40884890ab226e7700d748c0b5f598875e6b86becea70ccb51a3a01bf1025696d55fb0dd1542ae496ca256889c12e71b0659875bf53408ca> ND /g74 <10bf31705b072f884e1fe90f9206489354ae18a31147fbcc03bdfd0736fcd9b96c2814e2bcc69e87c10efeb8c4ebeea514b1556a480d734898b3925e614675155acfcdc792a4d06f885dc6d6e5ab3506ccfd5e19a1db80e620cef7b42a681c6b5cc1eb0ceddec46baaff24ec46ffd91e281eed4f6c6f697932579ef1833c4167990f370dc404c01988afa58152aa38607221a27202359580a52aec81727c2154d4d1b2697c26d5230ae71a42d438c7270ecc09ac129fc510edb9041a8a50c33131beabdc53f7> ND /g75 <10bf3170396d6c2645827902b7fdb87d6536ed268626d41c740401eab73396301d80e06991a87a73b86f78fa7c46f1398cf8a258613efe7e97e644c93f1c89550f6c53a32fc8eb9bc3595b91fe69770a6948d7de8b3c1ea876> ND /g76 <10bf31703962bf7b46f69a2f9b83d8f5a9638163efdd02f29dd60cb30a0f3bc5e1e9> ND /g79 <10bf31703cf7b0ff8863d021e030de70e18fa1ba738f> ND /g80 <10bf3170396c0b54acf7eeff720d61e2f994919e28286f532b1aa91fdcede3a03587d94ff809b369ecfe686cafe4beec7805ffaa75b14565229fcc9e63d80d6597dd2365bd240292b8bbf91baa5f700fb108ea8341312208135c49bbeb0594f0e8d15aa2a6d6ec4e6beb1a39526155e39284dbe373d446727e227590b3bbe89af5cef420db7097a3785a20967e469d1f3b2dbe5bc5d54d42> ND /g81 <10bf3170396d6c2645827902b7f2e7b1cd18493d9b9b0d7c789344e45d5b0fd34f614ffca22f9d3a331b93fff4702d4a8f35dcd833feed2f09161f664d33c0b235ac9077c0f50f0883cabeef541481e80abc6333132a3aa1be2f30bb1c7b02aef488fe77a1f1> ND /g82 <10bf31705ac903dc9afda0c3f6799718c756d30ef9763d728f336a71d9aa2c6de87c6867006e85d16df038cc729e491b75edb27f9af8f379c75209b0b9f085bf8ad618b1aab18c11c22ed52d516e7f8a80a55c6d898b38477f9c31608230a716d3d284bcd99d15107fc83bf0a12da0f24282bea3bc9f0ec9c45d99ab05ed647d8ac652> ND /g83 <10bf3170370053c742dba74015e5716802482f58bd13b6ac912bc0840912ed7c0ee5571402137a3becc76c345aa759a31aded681af5f49efd635191a8634d2aa347a4f5685786e148923887cbee872596556c61c62045bb1b96b935b361b7136598e94f97a1ea5c9b7da090cf462134195f27e02191d98f61f6a7e01653fdd56bdd91e8cba21c0271c9dfe0c836fede019> ND /g85 <10bf31703cf7234dfb7501bc12db7f8e0cdf9e8b47ddd6733a84c74aec025816eacc7d9b56d8a12ec58fdeac9011e3065c602cd8b5b1fc8e34fa0291a95a5cab8be4e501bdcc405b4aeace01efb40761042e> ND /g87 <10bf317064b6d37e59ebacebdd2f5eb6a8d9f3dea45445ea2aedaefca6b7a1430934acbc205dc97fdf760b45d61b65547c7a760ac23b6d41b3fd416931115ae462812035a1c0f2504f11cd67eab629820305064979df001715314e6570395d21e106> ND /g88 <10bf3170383eecc69b3320753197d2a6ac573b3e18ba99392a5cc8c0db24f1769bc699ede21d34b0096d36743dd3acaf4172d58eec1315d0955c8558352112146bdcb8b03ef4064954803d84f04dd2405638e13995943a224654> ND /g89 <10bf3170625c3a5c7a3615354a5bb31baace5ce06ad2752b6d5c34f3c43b381856dd80cd0c8d23> ND endendputputdup /FontName get exch definefont popend/AGPADB+Helvetica findfont /Encoding getdup 0 /g0 putdup 32 /g3 putdup 44 /g15 putdup 46 /g17 putdup 48 /g19 putdup 49 /g20 putdup 50 /g21 putdup 52 /g23 putdup 53 /g24 putdup 54 /g25 putdup 55 /g26 putdup 56 /g27 putdup 57 /g28 putdup 61 /g32 putdup 68 /g39 putdup 69 /g40 putdup 76 /g47 putdup 77 /g48 putdup 97 /g68 putdup 98 /g69 putdup 99 /g70 putdup 100 /g71 putdup 101 /g72 putdup 103 /g74 putdup 104 /g75 putdup 105 /g76 putdup 108 /g79 putdup 109 /g80 putdup 110 /g81 putdup 111 /g82 putdup 112 /g83 putdup 114 /g85 putdup 116 /g87 putdup 117 /g88 putdup 118 /g89 putpop%%EndResource[/N24/AGPADB+Helvetica -1 TZ%%BeginResource: font AGOPOM+Helvetica-Bold11 dict begin/FontName /AGOPOM+Helvetica-Bold def/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def/PaintType 0 def/FontType 1 def/FontBBox { 0 0 0 0 } def/FontInfo 1 dict dup begin  /OrigFontType /TrueType defend readonly defcurrentdictendsystemdict begindup /Private 7 dict dup begin/BlueValues [-15 0 600 650] def/MinFeature {16 16} def/password 5839 def/ND {def} def/NP {put} def/RD {string currentfile exch readhexstring pop} def2 index /CharStrings 392 dict dup begin/.notdef <10bf3170245fd1223a03820c84ab4224df604f1b5035cf5bf68168bb347fe08e590356e04269139259cb> ND /g3 <10bf317079c7734bf7> ND /g16 <10bf317050d6d7317f1f864b99d24c9d9e1f372d905a088434> ND /g38 <10bf31704ab339412d839a95db5b65576bb816b8814251d7b04f30e6086ec19cc511a7d3e1af2dcb53bb9764b009b4cfa82bf5c4a054745e70ddf77b6e2ba4555ccf6ba4223bbf93fa6aadcfd6dbbc2b68f366f49179a1bf562b41cd072763c4dd8e8a8426c9c2a8f63347dfcaeea5c3fca1035cb49c1be0743400aa6ae1f7f5db4bb6c9051a> ND /g39 <10bf3170258d0fb1827b4d63546d1e8890b450128f83a428451d528b2b91f67c48445941b4b04ff7aacea58280c8577400dd4599fec1d7a80bc33d84335dc3b866c2ce29398dd522af80bdb4ecb5bc2f1ebac9828b492ed3e564b6e1ed5bd26fcd618368d1006183de7a8615a9> ND /g43 <10bf3170245fd12235fd30864a3e1b96959651ea7c00dc24f98eb1db859fbea5a2e2358f52556ec2ba72eea2a4a823ed8f> ND /g48 <10bf317027e82ad34c16f005b3c95e47b66be03ac949d7e7aa1f63d5c3be5a7577c51cb7f9d34c7a4253fd4c4713c5b6669058122c289125eff994280b0fd96f76761515b4bd4978308c750ebe00466563239bc13f23b58fa7f7> ND /g54 <10bf31704726f1e5ad131a0f08bdec516b23791e3dcac8682e610beee4cf1fc055e7601820f7f271e4855533bc64a51283d4b5b17077c2b761ed18dbf7882407ac65d16d7ce4bd3af8768f4e78b439c23eabf7855f5a354f2c5f26d79de8bb7284c2d38049cf4864f54e2d4e7125a49654a188bf22340eff0fceb1a73dedd8ae4db9870df1b16083184dd013fecb6e104b9de0f9de127236f819d7b2cba8f2ef3b76cbfcc6f162c307ee0582d83a01719adb64b7659fbd25e4616b3280a1195e7c5fbe> ND /g68 <10bf31705ac903dc9a980332054142ee136889634d508ee3460f420d7de635b656b17d4dc517bbf81b97f4033b05ed023268502d68bb449c9a1fde2e498db032aa7b27ed06798dd3692324be3595fbd663c4820f9b4e1d649c280eac7ab09c4f4e5004a902da2542fe4dc89d99c09b7b73e8c9ed5f52062297c67adac5fe64ce1a284ad0ce52bc673639194cb1b2a20d5685395da125df673686df3d381734790dd6fee84ee6f10b2bf1ee6743f7d52d75499039963c8ddce771917bf30c84e62d44cf1e40ad84047ff13610db90a3934d54ae5aa6b9930b220e06b6178ad62859f39655a7b0c55d6c4958982254164fd22e2c> ND /g71 <10bf3170586c67eff3d5709368e371d37e43e421bba30e76a5c25d791547c0f9976dcf6316581fd19b4a3e2f78cd871d41eee5c9dfccd750a81ef09f2886fcaa15f1fd207b4a45450d67c360199010d49511ff667e04978afd0e8f6ad53eff0a26f669b30f792cb56dcef0f27d719d1d93b04b90acf8bd1a01d24effd149dd83f507110e63032c66a3c48fd8d611e0d706c1> ND /g72 <10bf317050d961e856d3e0fbc24a1e3ca30018c950e2b683f62e53f46660c84745fa1306bc302b6bb645ff532d79b9601802ff6ce73696606f77fe15042664ebfe237bbf10a8612e1e2ceb16f8f0f8d581fe72422470a8f9cfdc1348404543a4e67e787dcc5517203baf2e8f40717b568375b802eb787fca0c037170b7ecb4d2141073c292ebb9f0e51c9f5a658cf1c454b4628d98bb8b80081ba7> ND /g75 <10bf31703f9318caa84ea6a9c16c1b76702e89f9d28f17996887f4d16641163503231f4d53f9a48c8861117036bf44e03eda7607789135b8f7bda045662518583c78158168ee1ef1a4c4ae780e314116f45ddd3a2f2dd96acefb4bfcba6609e498f7bbd3e8c5d27f273884737e> ND /g76 <10bf31703cf768e92f79b784e5739123bfa643711e35e919f3001cfa0d6985171f2e76ec61bcc965db8fd33aaa> ND /g79 <10bf31703d39827325dea7bd347112d69ff6f7b012b4362cebf47d> ND /g81 <10bf31703f9318caa84c39b055118248ad06645e6af9a3c94c04b6ce112c7e9695252097e1eceb4242e42bec4a1fda76ccc6b5156551a7be44a9d252c14c5b40afab1f007fcb31113339d2ffcf22c7e7cb7d574b4550f48afa15a8145f82> ND /g82 <10bf3170599ab5ce2b3b1d39ba0248821b6c8d2a59ee8cf8bef60450cf381d7a0ee60b21648795592b463e1dcbf88f22af393643a65caf32c5ec0573008ba1c46eadec758748c17ad603fc5e89725157055cab364a4b60f416a651795e44325b7d99616ddc7e1ba8bf1896b3919176f8068546dce6de70d6f3acc9f5788a00ddc9db469c> ND /g85 <10bf3170383e353613770e840831b40dc281dcb1d75828063bc042c0a284e474f9fc87cdce4908a3284f03a05378f8e8ffbc82ef30148e9a45ad3fe3588b156909f72b2df92e16e0cd9b959b327205a8addfaaa156bf62a0> ND /g86 <10bf3170599a82aec1da869c17b98e2eb7b99773d07c6f11c63a5f54bf0afa3e5d7dc7b7d09b09548f849e21c76f7c6c1cf71f430a5e001bd251e85671387b9e6ff341a19717bd5cd747104c6f33cf01d866006e4ecaceac2870eb18bba570f087a0a493b07e33d45f5114513b46cf0d0e38b7abd289df9ce3e6c010278e6eceb05dc178d8fefb80d75b73bc941a64aafbbd8cff728d2deee42acee66ec83166545b7a378691c8e8546c69ecd87b192498aa13e3661caba06da3ba2c> ND /g87 <10bf3170675b06f5169c29abc2bc2a5c057adc40e0c08010b55cf62cea9a200b8ad37f1b3ebc23f808655c8ee9877b6f080ea8d0cdac563154cdbe8718b45f3f40ac609e4af4942fb9545ea134d31661dbf10d537044caad> ND /g88 <10bf31703a9ba95b45093029f80c676d56a14eb3d089d47b3a230306192df40a50d675b866fefa8d8fa4eead7c2f55cf8a7e50f28a850601a6d2b21237988234b84b0b8e3b2933f4071b2c62b54d46baa167df9a4944b07bf42888439e99dbb95798c329c3d68a531c2d> ND /g89 <10bf31706ae035c090d04959298479117c1d7fbdadbb01b336662b5af1d7e1f3afddf4200e15eb89d022c179> ND endendputputdup /FontName get exch definefont popend/AGOPOM+Helvetica-Bold findfont /Encoding getdup 0 /g0 putdup 32 /g3 putdup 45 /g16 putdup 67 /g38 putdup 68 /g39 putdup 72 /g43 putdup 77 /g48 putdup 83 /g54 putdup 97 /g68 putdup 100 /g71 putdup 101 /g72 putdup 104 /g75 putdup 105 /g76 putdup 108 /g79 putdup 110 /g81 putdup 111 /g82 putdup 114 /g85 putdup 115 /g86 putdup 116 /g87 putdup 117 /g88 putdup 118 /g89 putpop%%EndResource[/N23/AGOPOM+Helvetica-Bold -1 TZ33.6737 178.975 405.105 487.665 reWn[/DeviceGray] cs 0 sc113.752 654.199 m/N23 13.6166 Tf(Cross-Household Standard Deviation) show35.6975 600.756 m/N24 [0 -11.9605 11.9605 0 0 0] Tf(197) show(8)[-23.6519 ] pdfys(198) show(0)[-23.4689 ] pdfys(198) show(2)[-23.6519 ] pdfys(198) show(4)[-23.4689 ] pdfys(198) show(6)[-23.6519 ] pdfys(198) show(8)[-23.4689 ] pdfys(199) show(0)[-23.6519 ] pdfys(199) show(2)[-23.4689 ] pdfys(1994) show0.095993 wn53.546 595.549 m47.658 595.549 l53.546 590.212 m50.786 590.212 l53.546 584.692 m50.786 584.692 l53.546 579.172 m50.786 579.172 l53.546 573.836 m47.658 573.836 l53.546 568.499 m50.786 568.499 l53.546 562.979 m50.786 562.979 l53.546 557.459 m50.786 557.459 l53.546 552.123 m47.658 552.123 l53.546 546.602 m50.786 546.602 l53.546 541.266 m50.786 541.266 l53.546 535.746 m50.786 535.746 l53.546 530.226 m47.658 530.226 l53.546 524.889 m50.786 524.889 l53.546 519.369 m50.786 519.369 l53.546 514.033 m50.786 514.033 l53.546 508.513 m47.658 508.513 l53.546 502.992 m50.786 502.992 l53.546 497.656 m50.786 497.656 l53.546 492.136 m50.786 492.136 l53.546 486.8 m47.658 486.8 l53.546 481.28 m50.786 481.28 l53.546 475.759 m50.786 475.759 l53.546 470.423 m50.786 470.423 l53.546 465.087 m47.658 465.087 l53.546 459.567 m50.786 459.567 l53.546 454.046 m50.786 454.046 l53.546 448.71 m50.786 448.71 l53.546 443.19 m47.658 443.19 l53.546 437.854 m50.786 437.854 l53.546 432.333 m50.786 432.333 l53.546 426.813 m50.786 426.813 l53.546 421.477 m47.658 421.477 l53.546 415.957 m50.786 415.957 l53.546 410.62 m50.786 410.62 l53.546 405.1 m50.786 405.1 l53.546 399.58 m47.658 399.58 l53.546 394.244 m50.786 394.244 l53.546 388.724 m50.786 388.724 l53.546 383.387 m50.786 383.387 l53.546 378.051 m47.658 378.051 l53.546 372.531 m50.786 372.531 l53.546 367.011 m50.786 367.011 l53.546 361.674 m50.786 361.674 l53.546 356.154 m47.658 356.154 l53.546 350.818 m50.786 350.818 l53.546 345.298 m50.786 345.298 l53.546 339.777 m50.786 339.777 l53.546 334.441 m47.658 334.441 l53.546 328.921 m50.786 328.921 l53.546 323.585 m50.786 323.585 l53.546 318.064 m50.786 318.064 l53.546 312.544 m47.658 312.544 l53.546 307.208 m50.786 307.208 l53.546 301.688 m50.786 301.688 l53.546 296.351 m50.786 296.351 l53.546 290.831 m47.658 290.831 l53.546 285.495 m50.786 285.495 l53.546 279.975 m50.786 279.975 l53.546 274.639 m50.786 274.639 l53.546 269.118 m47.658 269.118 l53.546 263.598 m50.786 263.598 l53.546 258.262 m50.786 258.262 l53.546 252.742 m50.786 252.742 lSn53.546 247.405 m47.658 247.405 l53.546 241.885 m50.786 241.885 l53.546 236.365 m50.786 236.365 l53.546 231.029 m50.786 231.029 l53.546 225.508 m47.658 225.508 l53.546 220.172 m50.786 220.172 l53.546 214.836 m50.786 214.836 l53.546 209.132 m50.786 209.132 lS49.2568 640.474 m(0) shown53.546 620.022 m53.546 626.646 lS112.555 640.474 m(2) shown116.845 620.022 m116.845 626.646 lS175.67 640.474 m(4) shown179.96 620.022 m179.96 626.646 lS238.969 640.474 m(6) shown243.259 620.022 m243.259 626.646 lS302.084 640.474 m(8) shown306.373 620.022 m306.373 626.646 lS365.383 647.126 m(10) shown369.672 620.022 m369.672 626.646 lS428.497 647.126 m(12) shown432.787 620.022 m432.787 626.646 l53.546 620.022 m53.546 185.027 l432.419 185.027 l432.419 620.022 l53.546 620.022 lS0.382996 wn279.876 595.549 m318.334 590.212 l325.878 584.692 l291.285 579.356 l356.976 573.836 l371.512 568.315 l353.111 562.979 l355.503 557.459 l386.417 552.123 l388.257 546.602 l338.943 541.266 l384.761 535.746 l307.477 530.41 l345.383 524.889 l342.991 519.369 l332.502 514.033 l317.782 508.513 l313.366 503.176 l303.613 497.656 l323.486 492.136 l296.069 486.8 l284.108 481.28 l276.196 475.943 l271.596 470.607 l279.876 465.087 l266.26 459.567 l254.115 454.23 l278.404 448.71 l259.083 443.374 l273.804 437.854 l253.195 432.333 l263.867 426.997 l264.603 421.477 l238.658 416.141 l231.298 410.62 l220.626 405.284 l210.505 399.764 l224.49 394.428 l241.234 388.908 l224.49 383.387 l243.995 378.051 l268.468 372.531 l263.867 367.195 l263.867 361.674 l267.732 356.154 l246.571 350.818 l250.803 345.298 l234.058 339.961 l269.204 334.625 l231.298 329.105 l260.739 323.585 l277.668 318.248 l286.316 312.728 l285.58 307.208 l234.978 301.872 l308.213 296.351 l247.307 291.015 l240.314 285.495 l249.883 279.975 l253.195 274.639 l263.867 269.118 l267.732 263.782 l290.549 258.446 l218.601 252.926 l234.978 247.405 l262.211 242.069 l249.147 236.549 l237.738 231.213 l225.594 225.692 l222.65 220.172 l220.626 214.836 l193.576 209.316 lS[3.45 3.45 ] 0 dn156.591 595.549 m156.775 590.212 l160.639 584.692 l169.103 579.356 l176.464 573.836 l183.456 568.315 l188.608 562.979 l198.913 557.459 l213.449 552.123 l229.826 546.602 l230.378 541.266 l231.666 535.746 l227.986 530.41 l221.914 524.889 l213.449 519.369 l205.169 514.033 l199.281 508.513 l191.736 503.176 l184.56 497.656 l176.648 492.136 l171.127 486.8 l164.135 481.28 l156.775 475.943 l152.359 470.607 l147.758 465.087 l144.63 459.567 l143.158 454.23 l139.478 448.71 l136.166 443.374 l133.406 437.854 l130.278 432.333 l127.15 426.997 l124.205 421.477 l120.525 416.141 l118.317 410.62 l117.029 405.284 l116.477 399.764 l118.133 394.428 l121.077 383.387 l120.525 378.051 l122.365 372.531 l125.493 367.195 l126.413 361.674 l127.702 356.154 l128.806 350.818 l128.438 345.298 l126.781 339.961 l125.493 334.625 l124.021 329.105 l124.021 318.248 l122.181 312.728 l120.525 307.208 l118.317 301.872 l116.293 296.351 l114.453 291.015 l111.877 279.975 l110.589 274.639 l109.485 269.118 l108.749 263.782 l108.197 258.446 l106.541 252.926 l105.989 247.405 l105.989 242.069 l106.173 236.549 l106.173 231.213 l106.357 225.692 l106.725 220.172 l105.989 214.836 l105.253 209.316 lS0.192001 w[] 0 dn403.898 389.092 m432.419 389.092 l432.419 185.027 l403.898 185.027 l403.898 389.092 lq1 scfQS0.382996 wn423.77 374.555 m423.77 352.474 lS420.603 337.569 m/N24 [0 -8.8324 8.8324 0 0 0] Tf(Michigan Data) show[3.45 3.45 ] 0 dn412.73 374.555 m412.73 352.474 lS409.562 337.569 m(Lambda = 0.25, Multiplicative Error) show/AGOPOM+Helvetica-Bold /Font _pdfUndefineResource/N23 /Font _pdfUndefineResource/AGPADB+Helvetica /Font _pdfUndefineResource/N24 /Font _pdfUndefineResourcePDFVars/TermAll get exec end end%%PageTrailer%%EndPage%%Trailer%%EOF